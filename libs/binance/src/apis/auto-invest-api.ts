/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { Details } from '../models';
import { Details1 } from '../models';
import { Details2 } from '../models';
import { InlineResponse200240 } from '../models';
import { InlineResponse200241 } from '../models';
import { InlineResponse200242 } from '../models';
import { InlineResponse200243 } from '../models';
import { InlineResponse200244 } from '../models';
import { InlineResponse200245 } from '../models';
import { InlineResponse200246 } from '../models';
import { InlineResponse200247 } from '../models';
import { InlineResponse200248 } from '../models';
import { InlineResponse200249 } from '../models';
import { InlineResponse200250 } from '../models';
import { InlineResponse200251 } from '../models';
import { InlineResponse200252 } from '../models';
import { InlineResponse200253 } from '../models';
import { InlineResponse200254 } from '../models';
import { InlineResponse200255 } from '../models';
/**
 * AutoInvestApi - axios parameter creator
 * @export
 */
export const AutoInvestApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Query all source assets and target assets  Weight(IP): 1
         * @summary Query all source asset and target asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestAllAssetGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestAllAssetGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestAllAssetGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/all/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query subscription transaction history of a plan  Weight(IP): 1
         * @summary Query subscription transaction history
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [targetAsset] 
         * @param {string} [planType] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestHistoryListGet: async (timestamp: number, signature: string, planId?: number, startTime?: number, endTime?: number, targetAsset?: number, planType?: string, size?: number, current?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestHistoryListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestHistoryListGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/history/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (planId !== undefined) {
                localVarQueryParameter['planId'] = planId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (targetAsset !== undefined) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (planType !== undefined) {
                localVarQueryParameter['planType'] = planType;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query index details  Weight(IP): 1
         * @summary Query Index Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestIndexInfoGet: async (indexId: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling sapiV1LendingAutoInvestIndexInfoGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestIndexInfoGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestIndexInfoGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/index/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Details on users Index-Linked plan position details  Weight(IP): 1
         * @summary Query Index Linked Plan Position Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestIndexUserSummaryGet: async (indexId: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling sapiV1LendingAutoInvestIndexUserSummaryGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestIndexUserSummaryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestIndexUserSummaryGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/index/user-summary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * One time transaction  Weight(IP): 1
         * @summary One Time Transaction(TRADE)
         * @param {string} sourceType 
         * @param {number} subscriptionAmount 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [planId] 
         * @param {number} [indexId] 
         * @param {Array<Details2>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestOneOffPost: async (sourceType: string, subscriptionAmount: number, sourceAsset: string, timestamp: number, signature: string, requestId?: string, flexibleAllowedToUse?: boolean, planId?: number, indexId?: number, details?: Array<Details2>, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceType' is not null or undefined
            if (sourceType === null || sourceType === undefined) {
                throw new RequiredError('sourceType','Required parameter sourceType was null or undefined when calling sapiV1LendingAutoInvestOneOffPost.');
            }
            // verify required parameter 'subscriptionAmount' is not null or undefined
            if (subscriptionAmount === null || subscriptionAmount === undefined) {
                throw new RequiredError('subscriptionAmount','Required parameter subscriptionAmount was null or undefined when calling sapiV1LendingAutoInvestOneOffPost.');
            }
            // verify required parameter 'sourceAsset' is not null or undefined
            if (sourceAsset === null || sourceAsset === undefined) {
                throw new RequiredError('sourceAsset','Required parameter sourceAsset was null or undefined when calling sapiV1LendingAutoInvestOneOffPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestOneOffPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestOneOffPost.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/one-off`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['sourceType'] = sourceType;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (subscriptionAmount !== undefined) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (sourceAsset !== undefined) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (planId !== undefined) {
                localVarQueryParameter['planId'] = planId;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Transaction status for one-time transaction  Weight(IP): 1
         * @summary Query One-Time Transaction Status (USER_DATA)
         * @param {number} transactionId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestOneOffStatusGet: async (transactionId: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transactionId' is not null or undefined
            if (transactionId === null || transactionId === undefined) {
                throw new RequiredError('transactionId','Required parameter transactionId was null or undefined when calling sapiV1LendingAutoInvestOneOffStatusGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestOneOffStatusGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestOneOffStatusGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/one-off/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (transactionId !== undefined) {
                localVarQueryParameter['transactionId'] = transactionId;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Post an investment plan creation  Weight(IP): 1
         * @summary Investment plan creation (USER_DATA)
         * @param {string} sourceType 
         * @param {string} planType 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {Array<Details>} details 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [indexId] 
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestPlanAddPost: async (sourceType: string, planType: string, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, details: Array<Details>, timestamp: number, signature: string, requestId?: string, indexId?: number, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'sourceType' is not null or undefined
            if (sourceType === null || sourceType === undefined) {
                throw new RequiredError('sourceType','Required parameter sourceType was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'planType' is not null or undefined
            if (planType === null || planType === undefined) {
                throw new RequiredError('planType','Required parameter planType was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'subscriptionAmount' is not null or undefined
            if (subscriptionAmount === null || subscriptionAmount === undefined) {
                throw new RequiredError('subscriptionAmount','Required parameter subscriptionAmount was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'subscriptionCycle' is not null or undefined
            if (subscriptionCycle === null || subscriptionCycle === undefined) {
                throw new RequiredError('subscriptionCycle','Required parameter subscriptionCycle was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'subscriptionStartTime' is not null or undefined
            if (subscriptionStartTime === null || subscriptionStartTime === undefined) {
                throw new RequiredError('subscriptionStartTime','Required parameter subscriptionStartTime was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'sourceAsset' is not null or undefined
            if (sourceAsset === null || sourceAsset === undefined) {
                throw new RequiredError('sourceAsset','Required parameter sourceAsset was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'details' is not null or undefined
            if (details === null || details === undefined) {
                throw new RequiredError('details','Required parameter details was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestPlanAddPost.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/plan/add`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (sourceType !== undefined) {
                localVarQueryParameter['sourceType'] = sourceType;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (planType !== undefined) {
                localVarQueryParameter['planType'] = planType;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['IndexId'] = indexId;
            }

            if (subscriptionAmount !== undefined) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (subscriptionCycle !== undefined) {
                localVarQueryParameter['subscriptionCycle'] = subscriptionCycle;
            }

            if (subscriptionStartDay !== undefined) {
                localVarQueryParameter['subscriptionStartDay'] = subscriptionStartDay;
            }

            if (subscriptionStartWeekday !== undefined) {
                localVarQueryParameter['subscriptionStartWeekday'] = subscriptionStartWeekday;
            }

            if (subscriptionStartTime !== undefined) {
                localVarQueryParameter['subscriptionStartTime'] = subscriptionStartTime;
            }

            if (sourceAsset !== undefined) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Investment plan adjustment
         * @param {number} planId 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {Array<Details1>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestPlanEditPost: async (planId: number, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, timestamp: number, signature: string, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, details?: Array<Details1>, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            if (planId === null || planId === undefined) {
                throw new RequiredError('planId','Required parameter planId was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'subscriptionAmount' is not null or undefined
            if (subscriptionAmount === null || subscriptionAmount === undefined) {
                throw new RequiredError('subscriptionAmount','Required parameter subscriptionAmount was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'subscriptionCycle' is not null or undefined
            if (subscriptionCycle === null || subscriptionCycle === undefined) {
                throw new RequiredError('subscriptionCycle','Required parameter subscriptionCycle was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'subscriptionStartTime' is not null or undefined
            if (subscriptionStartTime === null || subscriptionStartTime === undefined) {
                throw new RequiredError('subscriptionStartTime','Required parameter subscriptionStartTime was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'sourceAsset' is not null or undefined
            if (sourceAsset === null || sourceAsset === undefined) {
                throw new RequiredError('sourceAsset','Required parameter sourceAsset was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestPlanEditPost.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/plan/edit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (planId !== undefined) {
                localVarQueryParameter['planId'] = planId;
            }

            if (subscriptionAmount !== undefined) {
                localVarQueryParameter['subscriptionAmount'] = subscriptionAmount;
            }

            if (subscriptionCycle !== undefined) {
                localVarQueryParameter['subscriptionCycle'] = subscriptionCycle;
            }

            if (subscriptionStartDay !== undefined) {
                localVarQueryParameter['subscriptionStartDay'] = subscriptionStartDay;
            }

            if (subscriptionStartWeekday !== undefined) {
                localVarQueryParameter['subscriptionStartWeekday'] = subscriptionStartWeekday;
            }

            if (subscriptionStartTime !== undefined) {
                localVarQueryParameter['subscriptionStartTime'] = subscriptionStartTime;
            }

            if (sourceAsset !== undefined) {
                localVarQueryParameter['sourceAsset'] = sourceAsset;
            }

            if (flexibleAllowedToUse !== undefined) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (details) {
                localVarQueryParameter['details'] = details;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Change Plan Status  Weight(IP): 1
         * @summary Change Plan Status
         * @param {number} planId 
         * @param {string} status 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestPlanEditStatusPost: async (planId: number, status: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planId' is not null or undefined
            if (planId === null || planId === undefined) {
                throw new RequiredError('planId','Required parameter planId was null or undefined when calling sapiV1LendingAutoInvestPlanEditStatusPost.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling sapiV1LendingAutoInvestPlanEditStatusPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestPlanEditStatusPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestPlanEditStatusPost.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/plan/edit-status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (planId !== undefined) {
                localVarQueryParameter['planId'] = planId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query holding details of the plan  Weight(IP): 1
         * @summary Query holding details of the plan
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestPlanIdGet: async (timestamp: number, signature: string, planId?: number, requestId?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestPlanIdGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestPlanIdGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/plan/id`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (planId !== undefined) {
                localVarQueryParameter['planId'] = planId;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query plan lists  Weight(IP): 1
         * @summary Get list of plans
         * @param {string} planType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestPlanListGet: async (planType: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'planType' is not null or undefined
            if (planType === null || planType === undefined) {
                throw new RequiredError('planType','Required parameter planType was null or undefined when calling sapiV1LendingAutoInvestPlanListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestPlanListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestPlanListGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/plan/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (planType !== undefined) {
                localVarQueryParameter['planType'] = planType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Rebalance Details (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestRebalanceHistoryGet: async (timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestRebalanceHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestRebalanceHistoryGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/rebalance/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Redemption History (USER_DATA)
         * @param {number} requestId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {string} [asset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestRedeemHistoryGet: async (requestId: number, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, asset?: string, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'requestId' is not null or undefined
            if (requestId === null || requestId === undefined) {
                throw new RequiredError('requestId','Required parameter requestId was null or undefined when calling sapiV1LendingAutoInvestRedeemHistoryGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestRedeemHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestRedeemHistoryGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/redeem/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * To redeem index-Linked plan holdings  Weight(IP): 1
         * @summary Index Linked Plan Redemption (TRADE)
         * @param {number} indexId PORTFOLIO plan&#x27;s Id
         * @param {number} redemptionPercentage user redeem percentage,10/20/100.
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestRedeemPost: async (indexId: number, redemptionPercentage: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'indexId' is not null or undefined
            if (indexId === null || indexId === undefined) {
                throw new RequiredError('indexId','Required parameter indexId was null or undefined when calling sapiV1LendingAutoInvestRedeemPost.');
            }
            // verify required parameter 'redemptionPercentage' is not null or undefined
            if (redemptionPercentage === null || redemptionPercentage === undefined) {
                throw new RequiredError('redemptionPercentage','Required parameter redemptionPercentage was null or undefined when calling sapiV1LendingAutoInvestRedeemPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestRedeemPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestRedeemPost.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (requestId !== undefined) {
                localVarQueryParameter['requestId'] = requestId;
            }

            if (redemptionPercentage !== undefined) {
                localVarQueryParameter['redemptionPercentage'] = redemptionPercentage;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Query source asset list (USER_DATA)
         * @param {string} usageType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [indexId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestSourceAssetListGet: async (usageType: string, timestamp: number, signature: string, targetAsset?: string, indexId?: number, flexibleAllowedToUse?: boolean, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'usageType' is not null or undefined
            if (usageType === null || usageType === undefined) {
                throw new RequiredError('usageType','Required parameter usageType was null or undefined when calling sapiV1LendingAutoInvestSourceAssetListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestSourceAssetListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestSourceAssetListGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/source-asset/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (targetAsset !== undefined) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (indexId !== undefined) {
                localVarQueryParameter['indexId'] = indexId;
            }

            if (usageType !== undefined) {
                localVarQueryParameter['usageType'] = usageType;
            }

            if (flexibleAllowedToUse !== undefined) {
                localVarQueryParameter['flexibleAllowedToUse'] = flexibleAllowedToUse;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get target asset list (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestTargetAssetListGet: async (timestamp: number, signature: string, targetAsset?: string, size?: number, current?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestTargetAssetListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestTargetAssetListGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/target-asset/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (targetAsset !== undefined) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * ROI return list for target asset  Weight(IP): 1
         * @summary Get target asset ROI data (USER_DATA)
         * @param {string} targetAsset 
         * @param {string} hisRoiType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingAutoInvestTargetAssetRoiListGet: async (targetAsset: string, hisRoiType: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'targetAsset' is not null or undefined
            if (targetAsset === null || targetAsset === undefined) {
                throw new RequiredError('targetAsset','Required parameter targetAsset was null or undefined when calling sapiV1LendingAutoInvestTargetAssetRoiListGet.');
            }
            // verify required parameter 'hisRoiType' is not null or undefined
            if (hisRoiType === null || hisRoiType === undefined) {
                throw new RequiredError('hisRoiType','Required parameter hisRoiType was null or undefined when calling sapiV1LendingAutoInvestTargetAssetRoiListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingAutoInvestTargetAssetRoiListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingAutoInvestTargetAssetRoiListGet.');
            }
            const localVarPath = `/sapi/v1/lending/auto-invest/target-asset/roi/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (targetAsset !== undefined) {
                localVarQueryParameter['targetAsset'] = targetAsset;
            }

            if (hisRoiType !== undefined) {
                localVarQueryParameter['hisRoiType'] = hisRoiType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * AutoInvestApi - functional programming interface
 * @export
 */
export const AutoInvestApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Query all source assets and target assets  Weight(IP): 1
         * @summary Query all source asset and target asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestAllAssetGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200242>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestAllAssetGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query subscription transaction history of a plan  Weight(IP): 1
         * @summary Query subscription transaction history
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [targetAsset] 
         * @param {string} [planType] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestHistoryListGet(timestamp: number, signature: string, planId?: number, startTime?: number, endTime?: number, targetAsset?: number, planType?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200248>>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestHistoryListGet(timestamp, signature, planId, startTime, endTime, targetAsset, planType, size, current, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query index details  Weight(IP): 1
         * @summary Query Index Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestIndexInfoGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200249>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestIndexInfoGet(indexId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Details on users Index-Linked plan position details  Weight(IP): 1
         * @summary Query Index Linked Plan Position Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestIndexUserSummaryGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200250>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestIndexUserSummaryGet(indexId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * One time transaction  Weight(IP): 1
         * @summary One Time Transaction(TRADE)
         * @param {string} sourceType 
         * @param {number} subscriptionAmount 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [planId] 
         * @param {number} [indexId] 
         * @param {Array<Details2>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestOneOffPost(sourceType: string, subscriptionAmount: number, sourceAsset: string, timestamp: number, signature: string, requestId?: string, flexibleAllowedToUse?: boolean, planId?: number, indexId?: number, details?: Array<Details2>, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200251>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestOneOffPost(sourceType, subscriptionAmount, sourceAsset, timestamp, signature, requestId, flexibleAllowedToUse, planId, indexId, details, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Transaction status for one-time transaction  Weight(IP): 1
         * @summary Query One-Time Transaction Status (USER_DATA)
         * @param {number} transactionId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestOneOffStatusGet(transactionId: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200252>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestOneOffStatusGet(transactionId, timestamp, signature, requestId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Post an investment plan creation  Weight(IP): 1
         * @summary Investment plan creation (USER_DATA)
         * @param {string} sourceType 
         * @param {string} planType 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {Array<Details>} details 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [indexId] 
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanAddPost(sourceType: string, planType: string, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, details: Array<Details>, timestamp: number, signature: string, requestId?: string, indexId?: number, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200244>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestPlanAddPost(sourceType, planType, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, details, timestamp, signature, requestId, indexId, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Investment plan adjustment
         * @param {number} planId 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {Array<Details1>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanEditPost(planId: number, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, timestamp: number, signature: string, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, details?: Array<Details1>, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200244>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestPlanEditPost(planId, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, timestamp, signature, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, details, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Change Plan Status  Weight(IP): 1
         * @summary Change Plan Status
         * @param {number} planId 
         * @param {string} status 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanEditStatusPost(planId: number, status: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200245>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestPlanEditStatusPost(planId, status, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query holding details of the plan  Weight(IP): 1
         * @summary Query holding details of the plan
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanIdGet(timestamp: number, signature: string, planId?: number, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200247>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestPlanIdGet(timestamp, signature, planId, requestId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query plan lists  Weight(IP): 1
         * @summary Get list of plans
         * @param {string} planType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanListGet(planType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200246>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestPlanListGet(planType, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Rebalance Details (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200255>>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp, signature, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Redemption History (USER_DATA)
         * @param {number} requestId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {string} [asset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRedeemHistoryGet(requestId: number, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, asset?: string, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200254>>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestRedeemHistoryGet(requestId, timestamp, signature, startTime, endTime, current, asset, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * To redeem index-Linked plan holdings  Weight(IP): 1
         * @summary Index Linked Plan Redemption (TRADE)
         * @param {number} indexId PORTFOLIO plan&#x27;s Id
         * @param {number} redemptionPercentage user redeem percentage,10/20/100.
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRedeemPost(indexId: number, redemptionPercentage: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200253>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestRedeemPost(indexId, redemptionPercentage, timestamp, signature, requestId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Query source asset list (USER_DATA)
         * @param {string} usageType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [indexId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestSourceAssetListGet(usageType: string, timestamp: number, signature: string, targetAsset?: string, indexId?: number, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200243>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestSourceAssetListGet(usageType, timestamp, signature, targetAsset, indexId, flexibleAllowedToUse, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get target asset list (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestTargetAssetListGet(timestamp: number, signature: string, targetAsset?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200240>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestTargetAssetListGet(timestamp, signature, targetAsset, size, current, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * ROI return list for target asset  Weight(IP): 1
         * @summary Get target asset ROI data (USER_DATA)
         * @param {string} targetAsset 
         * @param {string} hisRoiType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset: string, hisRoiType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200241>>>> {
            const localVarAxiosArgs = await AutoInvestApiAxiosParamCreator(configuration).sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset, hisRoiType, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * AutoInvestApi - factory interface
 * @export
 */
export const AutoInvestApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Query all source assets and target assets  Weight(IP): 1
         * @summary Query all source asset and target asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestAllAssetGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200242>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestAllAssetGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query subscription transaction history of a plan  Weight(IP): 1
         * @summary Query subscription transaction history
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [targetAsset] 
         * @param {string} [planType] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestHistoryListGet(timestamp: number, signature: string, planId?: number, startTime?: number, endTime?: number, targetAsset?: number, planType?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200248>>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestHistoryListGet(timestamp, signature, planId, startTime, endTime, targetAsset, planType, size, current, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query index details  Weight(IP): 1
         * @summary Query Index Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestIndexInfoGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200249>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestIndexInfoGet(indexId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Details on users Index-Linked plan position details  Weight(IP): 1
         * @summary Query Index Linked Plan Position Details(USER_DATA)
         * @param {number} indexId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestIndexUserSummaryGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200250>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestIndexUserSummaryGet(indexId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * One time transaction  Weight(IP): 1
         * @summary One Time Transaction(TRADE)
         * @param {string} sourceType 
         * @param {number} subscriptionAmount 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [planId] 
         * @param {number} [indexId] 
         * @param {Array<Details2>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestOneOffPost(sourceType: string, subscriptionAmount: number, sourceAsset: string, timestamp: number, signature: string, requestId?: string, flexibleAllowedToUse?: boolean, planId?: number, indexId?: number, details?: Array<Details2>, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200251>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestOneOffPost(sourceType, subscriptionAmount, sourceAsset, timestamp, signature, requestId, flexibleAllowedToUse, planId, indexId, details, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transaction status for one-time transaction  Weight(IP): 1
         * @summary Query One-Time Transaction Status (USER_DATA)
         * @param {number} transactionId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestOneOffStatusGet(transactionId: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200252>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestOneOffStatusGet(transactionId, timestamp, signature, requestId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Post an investment plan creation  Weight(IP): 1
         * @summary Investment plan creation (USER_DATA)
         * @param {string} sourceType 
         * @param {string} planType 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {Array<Details>} details 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] 
         * @param {number} [indexId] 
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanAddPost(sourceType: string, planType: string, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, details: Array<Details>, timestamp: number, signature: string, requestId?: string, indexId?: number, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200244>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestPlanAddPost(sourceType, planType, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, details, timestamp, signature, requestId, indexId, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Investment plan adjustment
         * @param {number} planId 
         * @param {number} subscriptionAmount 
         * @param {string} subscriptionCycle 
         * @param {number} subscriptionStartTime 
         * @param {string} sourceAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [subscriptionStartDay] 
         * @param {string} [subscriptionStartWeekday] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {Array<Details1>} [details] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanEditPost(planId: number, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, timestamp: number, signature: string, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, details?: Array<Details1>, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200244>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestPlanEditPost(planId, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, timestamp, signature, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, details, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Change Plan Status  Weight(IP): 1
         * @summary Change Plan Status
         * @param {number} planId 
         * @param {string} status 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanEditStatusPost(planId: number, status: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200245>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestPlanEditStatusPost(planId, status, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query holding details of the plan  Weight(IP): 1
         * @summary Query holding details of the plan
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [planId] 
         * @param {string} [requestId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanIdGet(timestamp: number, signature: string, planId?: number, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200247>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestPlanIdGet(timestamp, signature, planId, requestId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query plan lists  Weight(IP): 1
         * @summary Get list of plans
         * @param {string} planType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestPlanListGet(planType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200246>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestPlanListGet(planType, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Rebalance Details (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200255>>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp, signature, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
         * @summary Index Linked Plan Redemption History (USER_DATA)
         * @param {number} requestId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {string} [asset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRedeemHistoryGet(requestId: number, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, asset?: string, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200254>>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestRedeemHistoryGet(requestId, timestamp, signature, startTime, endTime, current, asset, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * To redeem index-Linked plan holdings  Weight(IP): 1
         * @summary Index Linked Plan Redemption (TRADE)
         * @param {number} indexId PORTFOLIO plan&#x27;s Id
         * @param {number} redemptionPercentage user redeem percentage,10/20/100.
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestRedeemPost(indexId: number, redemptionPercentage: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200253>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestRedeemPost(indexId, redemptionPercentage, timestamp, signature, requestId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Source Asset to be used for investment  Weight(IP): 1
         * @summary Query source asset list (USER_DATA)
         * @param {string} usageType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [indexId] 
         * @param {boolean} [flexibleAllowedToUse] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestSourceAssetListGet(usageType: string, timestamp: number, signature: string, targetAsset?: string, indexId?: number, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200243>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestSourceAssetListGet(usageType, timestamp, signature, targetAsset, indexId, flexibleAllowedToUse, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Get target asset list (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [targetAsset] 
         * @param {number} [size] Default:10 Max:100
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestTargetAssetListGet(timestamp: number, signature: string, targetAsset?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200240>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestTargetAssetListGet(timestamp, signature, targetAsset, size, current, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * ROI return list for target asset  Weight(IP): 1
         * @summary Get target asset ROI data (USER_DATA)
         * @param {string} targetAsset 
         * @param {string} hisRoiType 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset: string, hisRoiType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200241>>> {
            return AutoInvestApiFp(configuration).sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset, hisRoiType, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * AutoInvestApi - object-oriented interface
 * @export
 * @class AutoInvestApi
 * @extends {BaseAPI}
 */
export class AutoInvestApi extends BaseAPI {
    /**
     * Query all source assets and target assets  Weight(IP): 1
     * @summary Query all source asset and target asset (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestAllAssetGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200242>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestAllAssetGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query subscription transaction history of a plan  Weight(IP): 1
     * @summary Query subscription transaction history
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [planId] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [targetAsset] 
     * @param {string} [planType] 
     * @param {number} [size] Default:10 Max:100
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestHistoryListGet(timestamp: number, signature: string, planId?: number, startTime?: number, endTime?: number, targetAsset?: number, planType?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200248>>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestHistoryListGet(timestamp, signature, planId, startTime, endTime, targetAsset, planType, size, current, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query index details  Weight(IP): 1
     * @summary Query Index Details(USER_DATA)
     * @param {number} indexId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestIndexInfoGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200249>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestIndexInfoGet(indexId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Details on users Index-Linked plan position details  Weight(IP): 1
     * @summary Query Index Linked Plan Position Details(USER_DATA)
     * @param {number} indexId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestIndexUserSummaryGet(indexId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200250>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestIndexUserSummaryGet(indexId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * One time transaction  Weight(IP): 1
     * @summary One Time Transaction(TRADE)
     * @param {string} sourceType 
     * @param {number} subscriptionAmount 
     * @param {string} sourceAsset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [requestId] 
     * @param {boolean} [flexibleAllowedToUse] 
     * @param {number} [planId] 
     * @param {number} [indexId] 
     * @param {Array<Details2>} [details] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestOneOffPost(sourceType: string, subscriptionAmount: number, sourceAsset: string, timestamp: number, signature: string, requestId?: string, flexibleAllowedToUse?: boolean, planId?: number, indexId?: number, details?: Array<Details2>, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200251>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestOneOffPost(sourceType, subscriptionAmount, sourceAsset, timestamp, signature, requestId, flexibleAllowedToUse, planId, indexId, details, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Transaction status for one-time transaction  Weight(IP): 1
     * @summary Query One-Time Transaction Status (USER_DATA)
     * @param {number} transactionId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [requestId] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestOneOffStatusGet(transactionId: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200252>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestOneOffStatusGet(transactionId, timestamp, signature, requestId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Post an investment plan creation  Weight(IP): 1
     * @summary Investment plan creation (USER_DATA)
     * @param {string} sourceType 
     * @param {string} planType 
     * @param {number} subscriptionAmount 
     * @param {string} subscriptionCycle 
     * @param {number} subscriptionStartTime 
     * @param {string} sourceAsset 
     * @param {Array<Details>} details 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [requestId] 
     * @param {number} [indexId] 
     * @param {number} [subscriptionStartDay] 
     * @param {string} [subscriptionStartWeekday] 
     * @param {boolean} [flexibleAllowedToUse] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestPlanAddPost(sourceType: string, planType: string, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, details: Array<Details>, timestamp: number, signature: string, requestId?: string, indexId?: number, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200244>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestPlanAddPost(sourceType, planType, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, details, timestamp, signature, requestId, indexId, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Source Asset to be used for investment  Weight(IP): 1
     * @summary Investment plan adjustment
     * @param {number} planId 
     * @param {number} subscriptionAmount 
     * @param {string} subscriptionCycle 
     * @param {number} subscriptionStartTime 
     * @param {string} sourceAsset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [subscriptionStartDay] 
     * @param {string} [subscriptionStartWeekday] 
     * @param {boolean} [flexibleAllowedToUse] 
     * @param {Array<Details1>} [details] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestPlanEditPost(planId: number, subscriptionAmount: number, subscriptionCycle: string, subscriptionStartTime: number, sourceAsset: string, timestamp: number, signature: string, subscriptionStartDay?: number, subscriptionStartWeekday?: string, flexibleAllowedToUse?: boolean, details?: Array<Details1>, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200244>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestPlanEditPost(planId, subscriptionAmount, subscriptionCycle, subscriptionStartTime, sourceAsset, timestamp, signature, subscriptionStartDay, subscriptionStartWeekday, flexibleAllowedToUse, details, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change Plan Status  Weight(IP): 1
     * @summary Change Plan Status
     * @param {number} planId 
     * @param {string} status 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestPlanEditStatusPost(planId: number, status: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200245>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestPlanEditStatusPost(planId, status, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query holding details of the plan  Weight(IP): 1
     * @summary Query holding details of the plan
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [planId] 
     * @param {string} [requestId] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestPlanIdGet(timestamp: number, signature: string, planId?: number, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200247>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestPlanIdGet(timestamp, signature, planId, requestId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query plan lists  Weight(IP): 1
     * @summary Get list of plans
     * @param {string} planType 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestPlanListGet(planType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200246>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestPlanListGet(planType, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
     * @summary Index Linked Plan Rebalance Details (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200255>>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestRebalanceHistoryGet(timestamp, signature, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the history of Index Linked Plan Redemption transactions  Max 30 day difference between startTime and endTime If no startTime and endTime, default to show past 30 day records  Weight(IP): 1
     * @summary Index Linked Plan Redemption History (USER_DATA)
     * @param {number} requestId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {string} [asset] 
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestRedeemHistoryGet(requestId: number, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, asset?: string, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200254>>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestRedeemHistoryGet(requestId, timestamp, signature, startTime, endTime, current, asset, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * To redeem index-Linked plan holdings  Weight(IP): 1
     * @summary Index Linked Plan Redemption (TRADE)
     * @param {number} indexId PORTFOLIO plan&#x27;s Id
     * @param {number} redemptionPercentage user redeem percentage,10/20/100.
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [requestId] sourceType + unique, transactionId and requestId cannot be empty at the same time
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestRedeemPost(indexId: number, redemptionPercentage: number, timestamp: number, signature: string, requestId?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200253>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestRedeemPost(indexId, redemptionPercentage, timestamp, signature, requestId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Source Asset to be used for investment  Weight(IP): 1
     * @summary Query source asset list (USER_DATA)
     * @param {string} usageType 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [targetAsset] 
     * @param {number} [indexId] 
     * @param {boolean} [flexibleAllowedToUse] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestSourceAssetListGet(usageType: string, timestamp: number, signature: string, targetAsset?: string, indexId?: number, flexibleAllowedToUse?: boolean, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200243>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestSourceAssetListGet(usageType, timestamp, signature, targetAsset, indexId, flexibleAllowedToUse, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Get target asset list (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [targetAsset] 
     * @param {number} [size] Default:10 Max:100
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestTargetAssetListGet(timestamp: number, signature: string, targetAsset?: string, size?: number, current?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200240>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestTargetAssetListGet(timestamp, signature, targetAsset, size, current, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * ROI return list for target asset  Weight(IP): 1
     * @summary Get target asset ROI data (USER_DATA)
     * @param {string} targetAsset 
     * @param {string} hisRoiType 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof AutoInvestApi
     */
    public async sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset: string, hisRoiType: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200241>>> {
        return AutoInvestApiFp(this.configuration).sapiV1LendingAutoInvestTargetAssetRoiListGet(targetAsset, hisRoiType, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
