/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200132 } from '../models';
import { InlineResponse200133 } from '../models';
import { InlineResponse200134 } from '../models';
import { InlineResponse200135 } from '../models';
import { InlineResponse200136 } from '../models';
import { InlineResponse20054 } from '../models';
/**
 * StakingApi - axios parameter creator
 * @export
 */
export const StakingApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Get Personal Left Quota of Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingPersonalLeftQuotaGet: async (product: string, productId: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingPersonalLeftQuotaGet.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1StakingPersonalLeftQuotaGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingPersonalLeftQuotaGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingPersonalLeftQuotaGet.');
            }
            const localVarPath = `/sapi/v1/staking/personalLeftQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking Product Position (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingPositionGet: async (product: string, timestamp: number, signature: string, productId?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingPositionGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingPositionGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingPositionGet.');
            }
            const localVarPath = `/sapi/v1/staking/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available Staking product list.  Weight(IP): 1
         * @summary Get Staking Product List (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingProductListGet: async (product: string, timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingProductListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingProductListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingProductListGet.');
            }
            const localVarPath = `/sapi/v1/staking/productList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Purchase Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [renewable] true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingPurchasePost: async (product: string, productId: string, amount: number, timestamp: number, signature: string, renewable?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingPurchasePost.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1StakingPurchasePost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1StakingPurchasePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingPurchasePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingPurchasePost.');
            }
            const localVarPath = `/sapi/v1/staking/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (renewable !== undefined) {
                localVarQueryParameter['renewable'] = renewable;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1
         * @summary Redeem Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [amount] Mandatory if product is &#x60;F_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingRedeemPost: async (product: string, productId: string, timestamp: number, signature: string, positionId?: string, amount?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingRedeemPost.');
            }
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1StakingRedeemPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingRedeemPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingRedeemPost.');
            }
            const localVarPath = `/sapi/v1/staking/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1
         * @summary Set Auto Staking (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} positionId 
         * @param {string} renewable true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingSetAutoStakingPost: async (product: string, positionId: string, renewable: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingSetAutoStakingPost.');
            }
            // verify required parameter 'positionId' is not null or undefined
            if (positionId === null || positionId === undefined) {
                throw new RequiredError('positionId','Required parameter positionId was null or undefined when calling sapiV1StakingSetAutoStakingPost.');
            }
            // verify required parameter 'renewable' is not null or undefined
            if (renewable === null || renewable === undefined) {
                throw new RequiredError('renewable','Required parameter renewable was null or undefined when calling sapiV1StakingSetAutoStakingPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingSetAutoStakingPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingSetAutoStakingPost.');
            }
            const localVarPath = `/sapi/v1/staking/setAutoStaking`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (renewable !== undefined) {
                localVarQueryParameter['renewable'] = renewable;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking History (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} txnType &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1StakingStakingRecordGet: async (product: string, txnType: string, timestamp: number, signature: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'product' is not null or undefined
            if (product === null || product === undefined) {
                throw new RequiredError('product','Required parameter product was null or undefined when calling sapiV1StakingStakingRecordGet.');
            }
            // verify required parameter 'txnType' is not null or undefined
            if (txnType === null || txnType === undefined) {
                throw new RequiredError('txnType','Required parameter txnType was null or undefined when calling sapiV1StakingStakingRecordGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1StakingStakingRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1StakingStakingRecordGet.');
            }
            const localVarPath = `/sapi/v1/staking/stakingRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (product !== undefined) {
                localVarQueryParameter['product'] = product;
            }

            if (txnType !== undefined) {
                localVarQueryParameter['txnType'] = txnType;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * StakingApi - functional programming interface
 * @export
 */
export const StakingApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Get Personal Left Quota of Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPersonalLeftQuotaGet(product: string, productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200136>>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingPersonalLeftQuotaGet(product, productId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking Product Position (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPositionGet(product: string, timestamp: number, signature: string, productId?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200134>>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingPositionGet(product, timestamp, signature, productId, asset, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get available Staking product list.  Weight(IP): 1
         * @summary Get Staking Product List (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingProductListGet(product: string, timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200132>>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingProductListGet(product, timestamp, signature, asset, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Purchase Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [renewable] true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPurchasePost(product: string, productId: string, amount: number, timestamp: number, signature: string, renewable?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200133>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingPurchasePost(product, productId, amount, timestamp, signature, renewable, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1
         * @summary Redeem Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [amount] Mandatory if product is &#x60;F_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingRedeemPost(product: string, productId: string, timestamp: number, signature: string, positionId?: string, amount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20054>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingRedeemPost(product, productId, timestamp, signature, positionId, amount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1
         * @summary Set Auto Staking (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} positionId 
         * @param {string} renewable true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingSetAutoStakingPost(product: string, positionId: string, renewable: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20054>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingSetAutoStakingPost(product, positionId, renewable, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking History (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} txnType &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingStakingRecordGet(product: string, txnType: string, timestamp: number, signature: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200135>>>> {
            const localVarAxiosArgs = await StakingApiAxiosParamCreator(configuration).sapiV1StakingStakingRecordGet(product, txnType, timestamp, signature, asset, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * StakingApi - factory interface
 * @export
 */
export const StakingApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Weight(IP): 1
         * @summary Get Personal Left Quota of Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPersonalLeftQuotaGet(product: string, productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200136>>> {
            return StakingApiFp(configuration).sapiV1StakingPersonalLeftQuotaGet(product, productId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking Product Position (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPositionGet(product: string, timestamp: number, signature: string, productId?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200134>>> {
            return StakingApiFp(configuration).sapiV1StakingPositionGet(product, timestamp, signature, productId, asset, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available Staking product list.  Weight(IP): 1
         * @summary Get Staking Product List (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingProductListGet(product: string, timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200132>>> {
            return StakingApiFp(configuration).sapiV1StakingProductListGet(product, timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Purchase Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [renewable] true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingPurchasePost(product: string, productId: string, amount: number, timestamp: number, signature: string, renewable?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200133>> {
            return StakingApiFp(configuration).sapiV1StakingPurchasePost(product, productId, amount, timestamp, signature, renewable, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1
         * @summary Redeem Staking Product (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
         * @param {number} [amount] Mandatory if product is &#x60;F_DEFI&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingRedeemPost(product: string, productId: string, timestamp: number, signature: string, positionId?: string, amount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20054>> {
            return StakingApiFp(configuration).sapiV1StakingRedeemPost(product, productId, timestamp, signature, positionId, amount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1
         * @summary Set Auto Staking (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} positionId 
         * @param {string} renewable true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingSetAutoStakingPost(product: string, positionId: string, renewable: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20054>> {
            return StakingApiFp(configuration).sapiV1StakingSetAutoStakingPost(product, positionId, renewable, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Get Staking History (USER_DATA)
         * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
         * @param {string} txnType &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1StakingStakingRecordGet(product: string, txnType: string, timestamp: number, signature: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200135>>> {
            return StakingApiFp(configuration).sapiV1StakingStakingRecordGet(product, txnType, timestamp, signature, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * StakingApi - object-oriented interface
 * @export
 * @class StakingApi
 * @extends {BaseAPI}
 */
export class StakingApi extends BaseAPI {
    /**
     * Weight(IP): 1
     * @summary Get Personal Left Quota of Staking Product (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {string} productId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingPersonalLeftQuotaGet(product: string, productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200136>>> {
        return StakingApiFp(this.configuration).sapiV1StakingPersonalLeftQuotaGet(product, productId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Get Staking Product Position (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [productId] 
     * @param {string} [asset] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingPositionGet(product: string, timestamp: number, signature: string, productId?: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200134>>> {
        return StakingApiFp(this.configuration).sapiV1StakingPositionGet(product, timestamp, signature, productId, asset, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get available Staking product list.  Weight(IP): 1
     * @summary Get Staking Product List (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingProductListGet(product: string, timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200132>>> {
        return StakingApiFp(this.configuration).sapiV1StakingProductListGet(product, timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Purchase Staking Product (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {string} productId 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [renewable] true or false, default false. Active if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingPurchasePost(product: string, productId: string, amount: number, timestamp: number, signature: string, renewable?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200133>> {
        return StakingApiFp(this.configuration).sapiV1StakingPurchasePost(product, productId, amount, timestamp, signature, renewable, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Redeem Staking product. Locked staking and Locked DeFI staking belong to early redemption, redeeming in advance will result in loss of interest that you have earned.  Weight(IP): 1
     * @summary Redeem Staking Product (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {string} productId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionId] Mandatory if product is &#x60;STAKING&#x60; or &#x60;L_DEFI&#x60;
     * @param {number} [amount] Mandatory if product is &#x60;F_DEFI&#x60;
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingRedeemPost(product: string, productId: string, timestamp: number, signature: string, positionId?: string, amount?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20054>> {
        return StakingApiFp(this.configuration).sapiV1StakingRedeemPost(product, productId, timestamp, signature, positionId, amount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Set auto staking on Locked Staking or Locked DeFi Staking  Weight(IP): 1
     * @summary Set Auto Staking (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {string} positionId 
     * @param {string} renewable true or false
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingSetAutoStakingPost(product: string, positionId: string, renewable: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20054>> {
        return StakingApiFp(this.configuration).sapiV1StakingSetAutoStakingPost(product, positionId, renewable, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Get Staking History (USER_DATA)
     * @param {string} product * &#x60;STAKING&#x60; - for Locked Staking * &#x60;F_DEFI&#x60; - for flexible DeFi Staking * &#x60;L_DEFI&#x60; - for locked DeFi Staking
     * @param {string} txnType &#x60;SUBSCRIPTION&#x60;, &#x60;REDEMPTION&#x60;, &#x60;INTEREST&#x60;
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof StakingApi
     */
    public async sapiV1StakingStakingRecordGet(product: string, txnType: string, timestamp: number, signature: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200135>>> {
        return StakingApiFp(this.configuration).sapiV1StakingStakingRecordGet(product, txnType, timestamp, signature, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
