/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200100 } from '../models';
import { InlineResponse200101 } from '../models';
import { InlineResponse200102 } from '../models';
import { InlineResponse200103 } from '../models';
import { InlineResponse200104 } from '../models';
import { InlineResponse200105 } from '../models';
import { InlineResponse200106 } from '../models';
import { InlineResponse200107 } from '../models';
import { InlineResponse200108 } from '../models';
import { InlineResponse200109 } from '../models';
import { InlineResponse200110 } from '../models';
import { InlineResponse200111 } from '../models';
import { InlineResponse200112 } from '../models';
import { InlineResponse200113 } from '../models';
import { InlineResponse200114 } from '../models';
import { InlineResponse200115 } from '../models';
import { InlineResponse200116 } from '../models';
import { InlineResponse200117 } from '../models';
import { InlineResponse200118 } from '../models';
import { InlineResponse200119 } from '../models';
import { InlineResponse200120 } from '../models';
import { InlineResponse200121 } from '../models';
import { InlineResponse200122 } from '../models';
import { InlineResponse200123 } from '../models';
import { InlineResponse20080 } from '../models';
import { InlineResponse20081 } from '../models';
import { InlineResponse20082 } from '../models';
import { InlineResponse20083 } from '../models';
import { InlineResponse20084 } from '../models';
import { InlineResponse20085 } from '../models';
import { InlineResponse20086 } from '../models';
import { InlineResponse20087 } from '../models';
import { InlineResponse20088 } from '../models';
import { InlineResponse20093 } from '../models';
import { InlineResponse20094 } from '../models';
import { InlineResponse20095 } from '../models';
import { InlineResponse20096 } from '../models';
import { InlineResponse20097 } from '../models';
import { InlineResponse20098 } from '../models';
import { InlineResponse20099 } from '../models';
/**
 * SubAccountApi - axios parameter creator
 * @export
 */
export const SubAccountApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Fetch sub-account deposit address  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1CapitalDepositSubAddressGet: async (email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1CapitalDepositSubAddressGet.');
            }
            // verify required parameter 'coin' is not null or undefined
            if (coin === null || coin === undefined) {
                throw new RequiredError('coin','Required parameter coin was null or undefined when calling sapiV1CapitalDepositSubAddressGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1CapitalDepositSubAddressGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1CapitalDepositSubAddressGet.');
            }
            const localVarPath = `/sapi/v1/capital/deposit/subAddress`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account deposit history  Weight(IP): 1
         * @summary Sub-account Deposit History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [coin] Coin name
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1CapitalDepositSubHisrecGet: async (email: string, timestamp: number, signature: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1CapitalDepositSubHisrecGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1CapitalDepositSubHisrecGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1CapitalDepositSubHisrecGet.');
            }
            const localVarPath = `/sapi/v1/capital/deposit/subHisrec`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (offset !== undefined) {
                localVarQueryParameter['offset'] = offset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400
         * @summary Managed sub-account snapshot (For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {string} type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;(cross), \&quot;FUTURES\&quot;(UM)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountAccountSnapshotGet: async (email: string, type: string, timestamp: number, signature: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountAccountSnapshotGet.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling sapiV1ManagedSubaccountAccountSnapshotGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountAccountSnapshotGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountAccountSnapshotGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/accountSnapshot`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Managed sub-account asset details(For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountAssetGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountAssetGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountAssetGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountAssetGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor's managed sub-account deposit address  Weight(UID): 1
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)
         * @param {string} email 
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountDepositAddressGet: async (email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountDepositAddressGet.');
            }
            // verify required parameter 'coin' is not null or undefined
            if (coin === null || coin === undefined) {
                throw new RequiredError('coin','Required parameter coin was null or undefined when calling sapiV1ManagedSubaccountDepositAddressGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountDepositAddressGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountDepositAddressGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/deposit/address`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (coin !== undefined) {
                localVarQueryParameter['coin'] = coin;
            }

            if (network !== undefined) {
                localVarQueryParameter['network'] = network;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Deposit assets into the managed sub-account(For Investor Master Account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountDepositPost: async (toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toEmail' is not null or undefined
            if (toEmail === null || toEmail === undefined) {
                throw new RequiredError('toEmail','Required parameter toEmail was null or undefined when calling sapiV1ManagedSubaccountDepositPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1ManagedSubaccountDepositPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1ManagedSubaccountDepositPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountDepositPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountDepositPost.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/deposit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountFetchFutureAssetGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountFetchFutureAssetGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountFetchFutureAssetGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountFetchFutureAssetGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/fetch-future-asset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get investor's managed sub-account list.  Weight(UID): 60
         * @summary Query Managed Sub-account List (For Investor)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountInfoGet: async (email: string, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountInfoGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountInfoGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountInfoGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/info`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountMarginAssetGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountMarginAssetGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountMarginAssetGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountMarginAssetGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/marginAsset`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1
         * @summary Query Managed Sub Account Transfer Log (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountQueryTransLogForInvestorGet: async (email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForInvestorGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForInvestorGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForInvestorGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForInvestor`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountQueryTransLogForTradeParentGet: async (email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForTradeParentGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForTradeParentGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogForTradeParentGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/queryTransLogForTradeParent`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {string} transfers Transfer Direction
         * @param {string} transferFunctionAccountType Transfer function account type
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountQueryTransLogGet: async (transfers: string, transferFunctionAccountType: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transfers' is not null or undefined
            if (transfers === null || transfers === undefined) {
                throw new RequiredError('transfers','Required parameter transfers was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogGet.');
            }
            // verify required parameter 'transferFunctionAccountType' is not null or undefined
            if (transferFunctionAccountType === null || transferFunctionAccountType === undefined) {
                throw new RequiredError('transferFunctionAccountType','Required parameter transferFunctionAccountType was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountQueryTransLogGet.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/query-trans-log`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (transfers !== undefined) {
                localVarQueryParameter['transfers'] = transfers;
            }

            if (transferFunctionAccountType !== undefined) {
                localVarQueryParameter['transferFunctionAccountType'] = transferFunctionAccountType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Withdrawl assets from the managed sub-account(For Investor Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [transferDate] Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ManagedSubaccountWithdrawPost: async (fromEmail: string, asset: string, amount: number, timestamp: number, signature: string, transferDate?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromEmail' is not null or undefined
            if (fromEmail === null || fromEmail === undefined) {
                throw new RequiredError('fromEmail','Required parameter fromEmail was null or undefined when calling sapiV1ManagedSubaccountWithdrawPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1ManagedSubaccountWithdrawPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1ManagedSubaccountWithdrawPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ManagedSubaccountWithdrawPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ManagedSubaccountWithdrawPost.');
            }
            const localVarPath = `/sapi/v1/managed-subaccount/withdraw`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (transferDate !== undefined) {
                localVarQueryParameter['transferDate'] = transferDate;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Leverage Token for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {boolean} enableBlvt Only true for now
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountBlvtEnablePost: async (email: string, enableBlvt: boolean, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountBlvtEnablePost.');
            }
            // verify required parameter 'enableBlvt' is not null or undefined
            if (enableBlvt === null || enableBlvt === undefined) {
                throw new RequiredError('enableBlvt','Required parameter enableBlvt was null or undefined when calling sapiV1SubAccountBlvtEnablePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountBlvtEnablePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountBlvtEnablePost.');
            }
            const localVarPath = `/sapi/v1/sub-account/blvt/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (enableBlvt !== undefined) {
                localVarQueryParameter['enableBlvt'] = enableBlvt;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Enable Options for Sub-account (For Master Account).  Weight(IP): 1
         * @summary Enable Options for Sub-account (For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountEoptionsEnablePost: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountEoptionsEnablePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountEoptionsEnablePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountEoptionsEnablePost.');
            }
            const localVarPath = `/sapi/v1/sub-account/eoptions/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Futures Account (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesAccountGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountFuturesAccountGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesAccountGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Summary of Sub-account's Futures Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesAccountSummaryGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesAccountSummaryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesAccountSummaryGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Futures for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesEnablePost: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountFuturesEnablePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesEnablePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesEnablePost.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType 1:USDT-margined Futures, 2: Coin-margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesInternalTransferGet: async (email: string, futuresType: number, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountFuturesInternalTransferGet.');
            }
            // verify required parameter 'futuresType' is not null or undefined
            if (futuresType === null || futuresType === undefined) {
                throw new RequiredError('futuresType','Required parameter futuresType was null or undefined when calling sapiV1SubAccountFuturesInternalTransferGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesInternalTransferGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesInternalTransferGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - Master account can transfer max 2000 times a minute  Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer (For Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} toEmail Recipient email
         * @param {number} futuresType 1:USDT-margined Futures,2: Coin-margined Futures
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesInternalTransferPost: async (fromEmail: string, toEmail: string, futuresType: number, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromEmail' is not null or undefined
            if (fromEmail === null || fromEmail === undefined) {
                throw new RequiredError('fromEmail','Required parameter fromEmail was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'toEmail' is not null or undefined
            if (toEmail === null || toEmail === undefined) {
                throw new RequiredError('toEmail','Required parameter toEmail was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'futuresType' is not null or undefined
            if (futuresType === null || futuresType === undefined) {
                throw new RequiredError('futuresType','Required parameter futuresType was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesInternalTransferPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/internalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 10
         * @summary Futures Position-Risk of Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesPositionRiskGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountFuturesPositionRiskGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesPositionRiskGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesPositionRiskGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to its USDT-margined futures account * &#x60;2&#x60; - transfer from subaccount&#x27;s USDT-margined futures account to its spot account * &#x60;3&#x60; - transfer from subaccount&#x27;s spot account to its COIN-margined futures account * &#x60;4&#x60; - transfer from subaccount&#x27;s COIN-margined futures account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountFuturesTransferPost: async (email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountFuturesTransferPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/futures/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Query Sub-account List (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {string} [isFreeze] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1; max 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountListGet: async (timestamp: number, signature: string, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountListGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (isFreeze !== undefined) {
                localVarQueryParameter['isFreeze'] = isFreeze;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Margin Account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountMarginAccountGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountMarginAccountGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountMarginAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountMarginAccountGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/margin/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Margin Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountMarginAccountSummaryGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountMarginAccountSummaryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountMarginAccountSummaryGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/margin/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Margin for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountMarginEnablePost: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountMarginEnablePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountMarginEnablePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountMarginEnablePost.');
            }
            const localVarPath = `/sapi/v1/sub-account/margin/enable`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Margin Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to margin account * &#x60;2&#x60; - transfer from subaccount&#x27;s margin account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountMarginTransferPost: async (email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountMarginTransferPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/margin/transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get BTC valued asset summary of subaccounts.  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [page] Default 1
         * @param {number} [size] Default:10 Max:20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountSpotSummaryGet: async (timestamp: number, signature: string, email?: string, page?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountSpotSummaryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountSpotSummaryGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/spotSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10
         * @summary Sub-account's Status on Margin/Futures (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountStatusGet: async (timestamp: number, signature: string, email?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountStatusGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountStatusGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/status`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(UID): 3000
         * @summary Get IP Restriction for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountSubAccountApiIpRestrictionGet: async (email: string, subAccountApiKey: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionGet.');
            }
            // verify required parameter 'subAccountApiKey' is not null or undefined
            if (subAccountApiKey === null || subAccountApiKey === undefined) {
                throw new RequiredError('subAccountApiKey','Required parameter subAccountApiKey was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(UID): 3000
         * @summary Delete IP List for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete: async (email: string, subAccountApiKey: string, timestamp: number, signature: string, ipAddress?: string, thirdPartyName?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete.');
            }
            // verify required parameter 'subAccountApiKey' is not null or undefined
            if (subAccountApiKey === null || subAccountApiKey === undefined) {
                throw new RequiredError('subAccountApiKey','Required parameter subAccountApiKey was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete.');
            }
            const localVarPath = `/sapi/v1/sub-account/subAccountApi/ipRestriction/ipList`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (ipAddress !== undefined) {
                localVarQueryParameter['ipAddress'] = ipAddress;
            }

            if (thirdPartyName !== undefined) {
                localVarQueryParameter['thirdPartyName'] = thirdPartyName;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1
         * @summary Sub-account Spot Asset Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountSubTransferHistoryGet: async (timestamp: number, signature: string, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountSubTransferHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountSubTransferHistoryGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/sub/transfer/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60
         * @summary Query Sub-account Transaction Statistics (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountTransactionStatisticsGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV1SubAccountTransactionStatisticsGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountTransactionStatisticsGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountTransactionStatisticsGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/transaction-statistics`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Master (For Sub-account)
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountTransferSubToMasterPost: async (asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountTransferSubToMasterPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountTransferSubToMasterPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountTransferSubToMasterPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountTransferSubToMasterPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/transfer/subToMaster`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Sub-account of Same Master (For Sub-account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountTransferSubToSubPost: async (toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'toEmail' is not null or undefined
            if (toEmail === null || toEmail === undefined) {
                throw new RequiredError('toEmail','Required parameter toEmail was null or undefined when calling sapiV1SubAccountTransferSubToSubPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountTransferSubToSubPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountTransferSubToSubPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountTransferSubToSubPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountTransferSubToSubPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/transfer/subToSub`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1
         * @summary Sub-account Transfer History (For Sub-account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [type] * &#x60;1&#x60; - transfer in * &#x60;2&#x60; - transfer out
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountTransferSubUserHistoryGet: async (timestamp: number, signature: string, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountTransferSubUserHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountTransferSubUserHistoryGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/transfer/subUserHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1
         * @summary Universal Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountUniversalTransferGet: async (timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountUniversalTransferGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountUniversalTransferGet.');
            }
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1
         * @summary Universal Transfer (For Master Account)
         * @param {string} fromAccountType 
         * @param {string} toAccountType 
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {string} [symbol] Only supported under ISOLATED_MARGIN type
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountUniversalTransferPost: async (fromAccountType: string, toAccountType: string, asset: string, amount: number, timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, symbol?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAccountType' is not null or undefined
            if (fromAccountType === null || fromAccountType === undefined) {
                throw new RequiredError('fromAccountType','Required parameter fromAccountType was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            // verify required parameter 'toAccountType' is not null or undefined
            if (toAccountType === null || toAccountType === undefined) {
                throw new RequiredError('toAccountType','Required parameter toAccountType was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountUniversalTransferPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/universalTransfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromEmail !== undefined) {
                localVarQueryParameter['fromEmail'] = fromEmail;
            }

            if (toEmail !== undefined) {
                localVarQueryParameter['toEmail'] = toEmail;
            }

            if (fromAccountType !== undefined) {
                localVarQueryParameter['fromAccountType'] = fromAccountType;
            }

            if (toAccountType !== undefined) {
                localVarQueryParameter['toAccountType'] = toAccountType;
            }

            if (clientTranId !== undefined) {
                localVarQueryParameter['clientTranId'] = clientTranId;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString Please input a string. We will create a virtual email using that string for you to register
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SubAccountVirtualSubAccountPost: async (subAccountString: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'subAccountString' is not null or undefined
            if (subAccountString === null || subAccountString === undefined) {
                throw new RequiredError('subAccountString','Required parameter subAccountString was null or undefined when calling sapiV1SubAccountVirtualSubAccountPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SubAccountVirtualSubAccountPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SubAccountVirtualSubAccountPost.');
            }
            const localVarPath = `/sapi/v1/sub-account/virtualSubAccount`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (subAccountString !== undefined) {
                localVarQueryParameter['subAccountString'] = subAccountString;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Detail on Sub-account's Futures Account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV2SubAccountFuturesAccountGet: async (email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV2SubAccountFuturesAccountGet.');
            }
            // verify required parameter 'futuresType' is not null or undefined
            if (futuresType === null || futuresType === undefined) {
                throw new RequiredError('futuresType','Required parameter futuresType was null or undefined when calling sapiV2SubAccountFuturesAccountGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV2SubAccountFuturesAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV2SubAccountFuturesAccountGet.');
            }
            const localVarPath = `/sapi/v2/sub-account/futures/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Futures Account V2 (For Master Account)
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 10, Max 20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV2SubAccountFuturesAccountSummaryGet: async (futuresType: number, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'futuresType' is not null or undefined
            if (futuresType === null || futuresType === undefined) {
                throw new RequiredError('futuresType','Required parameter futuresType was null or undefined when calling sapiV2SubAccountFuturesAccountSummaryGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV2SubAccountFuturesAccountSummaryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV2SubAccountFuturesAccountSummaryGet.');
            }
            const localVarPath = `/sapi/v2/sub-account/futures/accountSummary`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Futures Position-Risk of Sub-account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV2SubAccountFuturesPositionRiskGet: async (email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV2SubAccountFuturesPositionRiskGet.');
            }
            // verify required parameter 'futuresType' is not null or undefined
            if (futuresType === null || futuresType === undefined) {
                throw new RequiredError('futuresType','Required parameter futuresType was null or undefined when calling sapiV2SubAccountFuturesPositionRiskGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV2SubAccountFuturesPositionRiskGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV2SubAccountFuturesPositionRiskGet.');
            }
            const localVarPath = `/sapi/v2/sub-account/futures/positionRisk`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (futuresType !== undefined) {
                localVarQueryParameter['futuresType'] = futuresType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Update IP Restriction for Sub-Account API key  Weight(UID): 3000
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {string} status IP Restriction status. 1 &#x3D; IP Unrestricted. 2 &#x3D; Restrict access to trusted IPs only. 3 &#x3D; Restrict access to users&#x27; trusted third party IPs only
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV2SubAccountSubAccountApiIpRestrictionPost: async (email: string, subAccountApiKey: string, status: string, timestamp: number, signature: string, thirdPartyName?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV2SubAccountSubAccountApiIpRestrictionPost.');
            }
            // verify required parameter 'subAccountApiKey' is not null or undefined
            if (subAccountApiKey === null || subAccountApiKey === undefined) {
                throw new RequiredError('subAccountApiKey','Required parameter subAccountApiKey was null or undefined when calling sapiV2SubAccountSubAccountApiIpRestrictionPost.');
            }
            // verify required parameter 'status' is not null or undefined
            if (status === null || status === undefined) {
                throw new RequiredError('status','Required parameter status was null or undefined when calling sapiV2SubAccountSubAccountApiIpRestrictionPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV2SubAccountSubAccountApiIpRestrictionPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV2SubAccountSubAccountApiIpRestrictionPost.');
            }
            const localVarPath = `/sapi/v2/sub-account/subAccountApi/ipRestriction`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (subAccountApiKey !== undefined) {
                localVarQueryParameter['subAccountApiKey'] = subAccountApiKey;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (thirdPartyName !== undefined) {
                localVarQueryParameter['thirdPartyName'] = thirdPartyName;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets  Weight(IP): 1
         * @summary Sub-account Assets (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV3SubAccountAssetsGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV3SubAccountAssetsGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV3SubAccountAssetsGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV3SubAccountAssetsGet.');
            }
            const localVarPath = `/sapi/v3/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Fetch sub-account assets  Weight(UID): 60
         * @summary Query Sub-account Assets (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV4SubAccountAssetsGet: async (email: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'email' is not null or undefined
            if (email === null || email === undefined) {
                throw new RequiredError('email','Required parameter email was null or undefined when calling sapiV4SubAccountAssetsGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV4SubAccountAssetsGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV4SubAccountAssetsGet.');
            }
            const localVarPath = `/sapi/v4/sub-account/assets`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (email !== undefined) {
                localVarQueryParameter['email'] = email;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SubAccountApi - functional programming interface
 * @export
 */
export const SubAccountApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Fetch sub-account deposit address  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1CapitalDepositSubAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20087>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1CapitalDepositSubAddressGet(email, coin, timestamp, signature, network, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch sub-account deposit history  Weight(IP): 1
         * @summary Sub-account Deposit History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [coin] Coin name
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1CapitalDepositSubHisrecGet(email: string, timestamp: number, signature: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20088>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1CapitalDepositSubHisrecGet(email, timestamp, signature, coin, status, startTime, endTime, limit, offset, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400
         * @summary Managed sub-account snapshot (For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {string} type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;(cross), \&quot;FUTURES\&quot;(UM)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountAccountSnapshotGet(email: string, type: string, timestamp: number, signature: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200111>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountAccountSnapshotGet(email, type, timestamp, signature, startTime, endTime, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Managed sub-account asset details(For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200110>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountAssetGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get investor's managed sub-account deposit address  Weight(UID): 1
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)
         * @param {string} email 
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountDepositAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200116>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountDepositAddressGet(email, coin, timestamp, signature, network, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Deposit assets into the managed sub-account(For Investor Master Account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountDepositPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200109>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountDepositPost(toEmail, asset, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountFetchFutureAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200113>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountFetchFutureAssetGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get investor's managed sub-account list.  Weight(UID): 60
         * @summary Query Managed Sub-account List (For Investor)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountInfoGet(email: string, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200115>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountInfoGet(email, timestamp, signature, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountMarginAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200114>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountMarginAssetGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1
         * @summary Query Managed Sub Account Transfer Log (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200112>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200112>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {string} transfers Transfer Direction
         * @param {string} transferFunctionAccountType Transfer function account type
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogGet(transfers: string, transferFunctionAccountType: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200117>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountQueryTransLogGet(transfers, transferFunctionAccountType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Withdrawl assets from the managed sub-account(For Investor Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [transferDate] Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountWithdrawPost(fromEmail: string, asset: string, amount: number, timestamp: number, signature: string, transferDate?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200109>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1ManagedSubaccountWithdrawPost(fromEmail, asset, amount, timestamp, signature, transferDate, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Leverage Token for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {boolean} enableBlvt Only true for now
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountBlvtEnablePost(email: string, enableBlvt: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200108>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountBlvtEnablePost(email, enableBlvt, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Enable Options for Sub-account (For Master Account).  Weight(IP): 1
         * @summary Enable Options for Sub-account (For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountEoptionsEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200121>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountEoptionsEnablePost(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Futures Account (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20098>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesAccountGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Summary of Sub-account's Futures Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20099>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesAccountSummaryGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Futures for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20097>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesEnablePost(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType 1:USDT-margined Futures, 2: Coin-margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesInternalTransferGet(email: string, futuresType: number, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20083>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesInternalTransferGet(email, futuresType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - Master account can transfer max 2000 times a minute  Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer (For Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} toEmail Recipient email
         * @param {number} futuresType 1:USDT-margined Futures,2: Coin-margined Futures
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesInternalTransferPost(fromEmail: string, toEmail: string, futuresType: number, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20084>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesInternalTransferPost(fromEmail, toEmail, futuresType, asset, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 10
         * @summary Futures Position-Risk of Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesPositionRiskGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200100>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesPositionRiskGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to its USDT-margined futures account * &#x60;2&#x60; - transfer from subaccount&#x27;s USDT-margined futures account to its spot account * &#x60;3&#x60; - transfer from subaccount&#x27;s spot account to its COIN-margined futures account * &#x60;4&#x60; - transfer from subaccount&#x27;s COIN-margined futures account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200101>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountFuturesTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Query Sub-account List (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {string} [isFreeze] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1; max 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountListGet(timestamp: number, signature: string, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20081>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountListGet(timestamp, signature, email, isFreeze, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Margin Account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20095>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountMarginAccountGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Margin Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20096>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountMarginAccountSummaryGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Enable Margin for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20094>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountMarginEnablePost(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Margin Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to margin account * &#x60;2&#x60; - transfer from subaccount&#x27;s margin account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200101>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountMarginTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get BTC valued asset summary of subaccounts.  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [page] Default 1
         * @param {number} [size] Default:10 Max:20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSpotSummaryGet(timestamp: number, signature: string, email?: string, page?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20086>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountSpotSummaryGet(timestamp, signature, email, page, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10
         * @summary Sub-account's Status on Margin/Futures (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountStatusGet(timestamp: number, signature: string, email?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20093>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountStatusGet(timestamp, signature, email, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(UID): 3000
         * @summary Get IP Restriction for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubAccountApiIpRestrictionGet(email: string, subAccountApiKey: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200118>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountSubAccountApiIpRestrictionGet(email, subAccountApiKey, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(UID): 3000
         * @summary Delete IP List for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email: string, subAccountApiKey: string, timestamp: number, signature: string, ipAddress?: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200119>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email, subAccountApiKey, timestamp, signature, ipAddress, thirdPartyName, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1
         * @summary Sub-account Spot Asset Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubTransferHistoryGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse20082>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountSubTransferHistoryGet(timestamp, signature, fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60
         * @summary Query Sub-account Transaction Statistics (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransactionStatisticsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200120>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountTransactionStatisticsGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Master (For Sub-account)
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubToMasterPost(asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200101>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountTransferSubToMasterPost(asset, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Sub-account of Same Master (For Sub-account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubToSubPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200101>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountTransferSubToSubPost(toEmail, asset, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1
         * @summary Sub-account Transfer History (For Sub-account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [type] * &#x60;1&#x60; - transfer in * &#x60;2&#x60; - transfer out
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubUserHistoryGet(timestamp: number, signature: string, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200102>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountTransferSubUserHistoryGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1
         * @summary Universal Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountUniversalTransferGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200103>>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountUniversalTransferGet(timestamp, signature, fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1
         * @summary Universal Transfer (For Master Account)
         * @param {string} fromAccountType 
         * @param {string} toAccountType 
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {string} [symbol] Only supported under ISOLATED_MARGIN type
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountUniversalTransferPost(fromAccountType: string, toAccountType: string, asset: string, amount: number, timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, symbol?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200104>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountUniversalTransferPost(fromAccountType, toAccountType, asset, amount, timestamp, signature, fromEmail, toEmail, clientTranId, symbol, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString Please input a string. We will create a virtual email using that string for you to register
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountVirtualSubAccountPost(subAccountString: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20080>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV1SubAccountVirtualSubAccountPost(subAccountString, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Detail on Sub-account's Futures Account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesAccountGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200105>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV2SubAccountFuturesAccountGet(email, futuresType, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Futures Account V2 (For Master Account)
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 10, Max 20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesAccountSummaryGet(futuresType: number, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200106>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV2SubAccountFuturesAccountSummaryGet(futuresType, timestamp, signature, page, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Futures Position-Risk of Sub-account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesPositionRiskGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200107>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV2SubAccountFuturesPositionRiskGet(email, futuresType, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Update IP Restriction for Sub-Account API key  Weight(UID): 3000
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {string} status IP Restriction status. 1 &#x3D; IP Unrestricted. 2 &#x3D; Restrict access to trusted IPs only. 3 &#x3D; Restrict access to users&#x27; trusted third party IPs only
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountSubAccountApiIpRestrictionPost(email: string, subAccountApiKey: string, status: string, timestamp: number, signature: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200122>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV2SubAccountSubAccountApiIpRestrictionPost(email, subAccountApiKey, status, timestamp, signature, thirdPartyName, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch sub-account assets  Weight(IP): 1
         * @summary Sub-account Assets (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV3SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20085>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV3SubAccountAssetsGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Fetch sub-account assets  Weight(UID): 60
         * @summary Query Sub-account Assets (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV4SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200123>>> {
            const localVarAxiosArgs = await SubAccountApiAxiosParamCreator(configuration).sapiV4SubAccountAssetsGet(email, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SubAccountApi - factory interface
 * @export
 */
export const SubAccountApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Fetch sub-account deposit address  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1CapitalDepositSubAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20087>> {
            return SubAccountApiFp(configuration).sapiV1CapitalDepositSubAddressGet(email, coin, timestamp, signature, network, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account deposit history  Weight(IP): 1
         * @summary Sub-account Deposit History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [coin] Coin name
         * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] 
         * @param {number} [offset] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1CapitalDepositSubHisrecGet(email: string, timestamp: number, signature: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20088>>> {
            return SubAccountApiFp(configuration).sapiV1CapitalDepositSubHisrecGet(email, timestamp, signature, coin, status, startTime, endTime, limit, offset, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400
         * @summary Managed sub-account snapshot (For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {string} type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;(cross), \&quot;FUTURES\&quot;(UM)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] min 7, max 30, default 7
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountAccountSnapshotGet(email: string, type: string, timestamp: number, signature: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200111>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountAccountSnapshotGet(email, type, timestamp, signature, startTime, endTime, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Managed sub-account asset details(For Investor Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200110>>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor's managed sub-account deposit address  Weight(UID): 1
         * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)
         * @param {string} email 
         * @param {string} coin Coin name
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [network] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountDepositAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200116>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountDepositAddressGet(email, coin, timestamp, signature, network, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Deposit assets into the managed sub-account(For Investor Master Account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountDepositPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200109>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountDepositPost(toEmail, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account futures asset details
         * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountFetchFutureAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200113>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountFetchFutureAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get investor's managed sub-account list.  Weight(UID): 60
         * @summary Query Managed Sub-account List (For Investor)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountInfoGet(email: string, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200115>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountInfoGet(email, timestamp, signature, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account margin asset details
         * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountMarginAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200114>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountMarginAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1
         * @summary Query Managed Sub Account Transfer Log (For Investor Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200112>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {string} [transfers] Transfer Direction (FROM/TO)
         * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200112>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60
         * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
         * @param {string} transfers Transfer Direction
         * @param {string} transferFunctionAccountType Transfer function account type
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountQueryTransLogGet(transfers: string, transferFunctionAccountType: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200117>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountQueryTransLogGet(transfers, transferFunctionAccountType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Withdrawl assets from the managed sub-account(For Investor Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [transferDate] Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ManagedSubaccountWithdrawPost(fromEmail: string, asset: string, amount: number, timestamp: number, signature: string, transferDate?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200109>> {
            return SubAccountApiFp(configuration).sapiV1ManagedSubaccountWithdrawPost(fromEmail, asset, amount, timestamp, signature, transferDate, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Enable Leverage Token for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {boolean} enableBlvt Only true for now
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountBlvtEnablePost(email: string, enableBlvt: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200108>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountBlvtEnablePost(email, enableBlvt, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Enable Options for Sub-account (For Master Account).  Weight(IP): 1
         * @summary Enable Options for Sub-account (For Master Account)(USER_DATA)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountEoptionsEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200121>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountEoptionsEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Futures Account (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20098>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesAccountGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Summary of Sub-account's Futures Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20099>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesAccountSummaryGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Enable Futures for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20097>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer History (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType 1:USDT-margined Futures, 2: Coin-margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default value: 50, Max value: 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesInternalTransferGet(email: string, futuresType: number, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20083>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesInternalTransferGet(email, futuresType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Master account can transfer max 2000 times a minute  Weight(IP): 1
         * @summary Sub-account Futures Asset Transfer (For Master Account)
         * @param {string} fromEmail Sender email
         * @param {string} toEmail Recipient email
         * @param {number} futuresType 1:USDT-margined Futures,2: Coin-margined Futures
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesInternalTransferPost(fromEmail: string, toEmail: string, futuresType: number, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20084>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesInternalTransferPost(fromEmail, toEmail, futuresType, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 10
         * @summary Futures Position-Risk of Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesPositionRiskGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200100>>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesPositionRiskGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to its USDT-margined futures account * &#x60;2&#x60; - transfer from subaccount&#x27;s USDT-margined futures account to its spot account * &#x60;3&#x60; - transfer from subaccount&#x27;s spot account to its COIN-margined futures account * &#x60;4&#x60; - transfer from subaccount&#x27;s COIN-margined futures account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountFuturesTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200101>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountFuturesTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Query Sub-account List (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {string} [isFreeze] 
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1; max 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountListGet(timestamp: number, signature: string, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20081>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountListGet(timestamp, signature, email, isFreeze, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 10
         * @summary Detail on Sub-account's Margin Account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20095>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountMarginAccountGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Margin Account (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20096>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountMarginAccountSummaryGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Enable Margin for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20094>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountMarginEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Margin Transfer for Sub-account (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to margin account * &#x60;2&#x60; - transfer from subaccount&#x27;s margin account to its spot account
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountMarginTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200101>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountMarginTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get BTC valued asset summary of subaccounts.  Weight(IP): 1
         * @summary Sub-account Spot Assets Summary (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [page] Default 1
         * @param {number} [size] Default:10 Max:20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSpotSummaryGet(timestamp: number, signature: string, email?: string, page?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20086>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountSpotSummaryGet(timestamp, signature, email, page, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10
         * @summary Sub-account's Status on Margin/Futures (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [email] Sub-account email
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountStatusGet(timestamp: number, signature: string, email?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20093>>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountStatusGet(timestamp, signature, email, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(UID): 3000
         * @summary Get IP Restriction for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubAccountApiIpRestrictionGet(email: string, subAccountApiKey: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200118>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountSubAccountApiIpRestrictionGet(email, subAccountApiKey, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(UID): 3000
         * @summary Delete IP List for a Sub-account API Key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [ipAddress] Can be added in batches, separated by commas
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email: string, subAccountApiKey: string, timestamp: number, signature: string, ipAddress?: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200119>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email, subAccountApiKey, timestamp, signature, ipAddress, thirdPartyName, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1
         * @summary Sub-account Spot Asset Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 1
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountSubTransferHistoryGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse20082>>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountSubTransferHistoryGet(timestamp, signature, fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60
         * @summary Query Sub-account Transaction Statistics (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransactionStatisticsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200120>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountTransactionStatisticsGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Master (For Sub-account)
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubToMasterPost(asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200101>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountTransferSubToMasterPost(asset, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Transfer to Sub-account of Same Master (For Sub-account)
         * @param {string} toEmail Recipient email
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubToSubPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200101>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountTransferSubToSubPost(toEmail, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1
         * @summary Sub-account Transfer History (For Sub-account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [type] * &#x60;1&#x60; - transfer in * &#x60;2&#x60; - transfer out
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountTransferSubUserHistoryGet(timestamp: number, signature: string, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200102>>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountTransferSubUserHistoryGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1
         * @summary Universal Transfer History (For Master Account)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 500, Max 500
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountUniversalTransferGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200103>>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountUniversalTransferGet(timestamp, signature, fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1
         * @summary Universal Transfer (For Master Account)
         * @param {string} fromAccountType 
         * @param {string} toAccountType 
         * @param {string} asset 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [fromEmail] Sub-account email
         * @param {string} [toEmail] Sub-account email
         * @param {string} [clientTranId] 
         * @param {string} [symbol] Only supported under ISOLATED_MARGIN type
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountUniversalTransferPost(fromAccountType: string, toAccountType: string, asset: string, amount: number, timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, symbol?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200104>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountUniversalTransferPost(fromAccountType, toAccountType, asset, amount, timestamp, signature, fromEmail, toEmail, clientTranId, symbol, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1
         * @summary Create a Virtual Sub-account(For Master Account)
         * @param {string} subAccountString Please input a string. We will create a virtual email using that string for you to register
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SubAccountVirtualSubAccountPost(subAccountString: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20080>> {
            return SubAccountApiFp(configuration).sapiV1SubAccountVirtualSubAccountPost(subAccountString, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Detail on Sub-account's Futures Account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesAccountGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200105>> {
            return SubAccountApiFp(configuration).sapiV2SubAccountFuturesAccountGet(email, futuresType, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 10
         * @summary Summary of Sub-account's Futures Account V2 (For Master Account)
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {number} [limit] Default 10, Max 20
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesAccountSummaryGet(futuresType: number, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200106>> {
            return SubAccountApiFp(configuration).sapiV2SubAccountFuturesAccountSummaryGet(futuresType, timestamp, signature, page, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Futures Position-Risk of Sub-account V2 (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountFuturesPositionRiskGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200107>> {
            return SubAccountApiFp(configuration).sapiV2SubAccountFuturesPositionRiskGet(email, futuresType, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Update IP Restriction for Sub-Account API key  Weight(UID): 3000
         * @summary Update IP Restriction for Sub-Account API key (For Master Account)
         * @param {string} email Sub-account email
         * @param {string} subAccountApiKey 
         * @param {string} status IP Restriction status. 1 &#x3D; IP Unrestricted. 2 &#x3D; Restrict access to trusted IPs only. 3 &#x3D; Restrict access to users&#x27; trusted third party IPs only
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [thirdPartyName] third party IP list name
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV2SubAccountSubAccountApiIpRestrictionPost(email: string, subAccountApiKey: string, status: string, timestamp: number, signature: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200122>> {
            return SubAccountApiFp(configuration).sapiV2SubAccountSubAccountApiIpRestrictionPost(email, subAccountApiKey, status, timestamp, signature, thirdPartyName, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets  Weight(IP): 1
         * @summary Sub-account Assets (For Master Account)
         * @param {string} email Sub-account email
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV3SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20085>> {
            return SubAccountApiFp(configuration).sapiV3SubAccountAssetsGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Fetch sub-account assets  Weight(UID): 60
         * @summary Query Sub-account Assets (For Master Account)
         * @param {string} email 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV4SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200123>> {
            return SubAccountApiFp(configuration).sapiV4SubAccountAssetsGet(email, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SubAccountApi - object-oriented interface
 * @export
 * @class SubAccountApi
 * @extends {BaseAPI}
 */
export class SubAccountApi extends BaseAPI {
    /**
     * Fetch sub-account deposit address  Weight(IP): 1
     * @summary Sub-account Spot Assets Summary (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} coin Coin name
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [network] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1CapitalDepositSubAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20087>> {
        return SubAccountApiFp(this.configuration).sapiV1CapitalDepositSubAddressGet(email, coin, timestamp, signature, network, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch sub-account deposit history  Weight(IP): 1
     * @summary Sub-account Deposit History (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [coin] Coin name
     * @param {number} [status] 0(0:pending,6: credited but cannot withdraw, 1:success)
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] 
     * @param {number} [offset] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1CapitalDepositSubHisrecGet(email: string, timestamp: number, signature: string, coin?: string, status?: number, startTime?: number, endTime?: number, limit?: number, offset?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20088>>> {
        return SubAccountApiFp(this.configuration).sapiV1CapitalDepositSubHisrecGet(email, timestamp, signature, coin, status, startTime, endTime, limit, offset, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - The query time period must be less then 30 days - Support query within the last one month only - If `startTime` and `endTime` not sent, return records of the last 7 days by default  Weight(IP): 2400
     * @summary Managed sub-account snapshot (For Investor Master Account)
     * @param {string} email Sub-account email
     * @param {string} type \&quot;SPOT\&quot;, \&quot;MARGIN\&quot;(cross), \&quot;FUTURES\&quot;(UM)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] min 7, max 30, default 7
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountAccountSnapshotGet(email: string, type: string, timestamp: number, signature: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200111>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountAccountSnapshotGet(email, type, timestamp, signature, startTime, endTime, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Managed sub-account asset details(For Investor Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200110>>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get investor's managed sub-account deposit address  Weight(UID): 1
     * @summary Get Managed Sub-account Deposit Address (For Investor Master Account)
     * @param {string} email 
     * @param {string} coin Coin name
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [network] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountDepositAddressGet(email: string, coin: string, timestamp: number, signature: string, network?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200116>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountDepositAddressGet(email, coin, timestamp, signature, network, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Deposit assets into the managed sub-account(For Investor Master Account)
     * @param {string} toEmail Recipient email
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountDepositPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200109>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountDepositPost(toEmail, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Investor can use this api to query managed sub account futures asset details
     * @summary Query Managed Sub-account Futures Asset Details (For Investor Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountFetchFutureAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200113>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountFetchFutureAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get investor's managed sub-account list.  Weight(UID): 60
     * @summary Query Managed Sub-account List (For Investor)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountInfoGet(email: string, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200115>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountInfoGet(email, timestamp, signature, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Investor can use this api to query managed sub account margin asset details
     * @summary Query Managed Sub-account Margin Asset Details (For Investor Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountMarginAssetGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200114>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountMarginAssetGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Investor can use this api to query managed sub account transfer log. This endpoint is available for investor of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team.  Weight(IP): 1
     * @summary Query Managed Sub Account Transfer Log (For Investor Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 500; max 1000.
     * @param {string} [transfers] Transfer Direction (FROM/TO)
     * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200112>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountQueryTransLogForInvestorGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Trading team can use this api to query managed sub account transfer log. This endpoint is available for trading team of Managed Sub-Account. A Managed Sub-Account is an account type for investors who value flexibility in asset allocation and account application, while delegating trades to a professional trading team  Weight(IP): 60
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 500; max 1000.
     * @param {string} [transfers] Transfer Direction (FROM/TO)
     * @param {string} [transferFunctionAccountType] Transfer function account type (SPOT/MARGIN/ISOLATED_MARGIN/USDT_FUTURE/COIN_FUTURE)
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, transfers?: string, transferFunctionAccountType?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200112>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountQueryTransLogForTradeParentGet(email, timestamp, signature, startTime, endTime, page, limit, transfers, transferFunctionAccountType, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Managed Sub Account Transfer Log (For Trading Team Sub Account)  Weight(UID): 60
     * @summary Query Managed Sub Account Transfer Log (For Trading Team Sub Account)(USER_DATA)
     * @param {string} transfers Transfer Direction
     * @param {string} transferFunctionAccountType Transfer function account type
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountQueryTransLogGet(transfers: string, transferFunctionAccountType: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200117>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountQueryTransLogGet(transfers, transferFunctionAccountType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Withdrawl assets from the managed sub-account(For Investor Master Account)
     * @param {string} fromEmail Sender email
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [transferDate] Withdrawals is automatically occur on the transfer date(UTC0). If a date is not selected, the withdrawal occurs right now
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1ManagedSubaccountWithdrawPost(fromEmail: string, asset: string, amount: number, timestamp: number, signature: string, transferDate?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200109>> {
        return SubAccountApiFp(this.configuration).sapiV1ManagedSubaccountWithdrawPost(fromEmail, asset, amount, timestamp, signature, transferDate, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Enable Leverage Token for Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {boolean} enableBlvt Only true for now
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountBlvtEnablePost(email: string, enableBlvt: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200108>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountBlvtEnablePost(email, enableBlvt, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Enable Options for Sub-account (For Master Account).  Weight(IP): 1
     * @summary Enable Options for Sub-account (For Master Account)(USER_DATA)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountEoptionsEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200121>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountEoptionsEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 10
     * @summary Detail on Sub-account's Futures Account (For Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20098>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesAccountGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Summary of Sub-account's Futures Account (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20099>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesAccountSummaryGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Enable Futures for Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20097>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Sub-account Futures Asset Transfer History (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} futuresType 1:USDT-margined Futures, 2: Coin-margined Futures
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default value: 50, Max value: 500
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesInternalTransferGet(email: string, futuresType: number, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20083>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesInternalTransferGet(email, futuresType, timestamp, signature, startTime, endTime, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - Master account can transfer max 2000 times a minute  Weight(IP): 1
     * @summary Sub-account Futures Asset Transfer (For Master Account)
     * @param {string} fromEmail Sender email
     * @param {string} toEmail Recipient email
     * @param {number} futuresType 1:USDT-margined Futures,2: Coin-margined Futures
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesInternalTransferPost(fromEmail: string, toEmail: string, futuresType: number, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20084>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesInternalTransferPost(fromEmail, toEmail, futuresType, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 10
     * @summary Futures Position-Risk of Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesPositionRiskGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200100>>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesPositionRiskGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Transfer for Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to its USDT-margined futures account * &#x60;2&#x60; - transfer from subaccount&#x27;s USDT-margined futures account to its spot account * &#x60;3&#x60; - transfer from subaccount&#x27;s spot account to its COIN-margined futures account * &#x60;4&#x60; - transfer from subaccount&#x27;s COIN-margined futures account to its spot account
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountFuturesTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200101>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountFuturesTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Query Sub-account List (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [email] Sub-account email
     * @param {string} [isFreeze] 
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 1; max 200
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountListGet(timestamp: number, signature: string, email?: string, isFreeze?: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20081>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountListGet(timestamp, signature, email, isFreeze, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 10
     * @summary Detail on Sub-account's Margin Account (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountMarginAccountGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20095>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountMarginAccountGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 10
     * @summary Summary of Sub-account's Margin Account (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountMarginAccountSummaryGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20096>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountMarginAccountSummaryGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Enable Margin for Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountMarginEnablePost(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20094>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountMarginEnablePost(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Margin Transfer for Sub-account (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} type * &#x60;1&#x60; - transfer from subaccount&#x27;s spot account to margin account * &#x60;2&#x60; - transfer from subaccount&#x27;s margin account to its spot account
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountMarginTransferPost(email: string, asset: string, amount: number, type: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200101>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountMarginTransferPost(email, asset, amount, type, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get BTC valued asset summary of subaccounts.  Weight(IP): 1
     * @summary Sub-account Spot Assets Summary (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [email] Sub-account email
     * @param {number} [page] Default 1
     * @param {number} [size] Default:10 Max:20
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountSpotSummaryGet(timestamp: number, signature: string, email?: string, page?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20086>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountSpotSummaryGet(timestamp, signature, email, page, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - If no `email` sent, all sub-accounts' information will be returned.  Weight(IP): 10
     * @summary Sub-account's Status on Margin/Futures (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [email] Sub-account email
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountStatusGet(timestamp: number, signature: string, email?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20093>>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountStatusGet(timestamp, signature, email, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(UID): 3000
     * @summary Get IP Restriction for a Sub-account API Key (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} subAccountApiKey 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountSubAccountApiIpRestrictionGet(email: string, subAccountApiKey: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200118>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountSubAccountApiIpRestrictionGet(email, subAccountApiKey, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(UID): 3000
     * @summary Delete IP List for a Sub-account API Key (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} subAccountApiKey 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [ipAddress] Can be added in batches, separated by commas
     * @param {string} [thirdPartyName] third party IP list name
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email: string, subAccountApiKey: string, timestamp: number, signature: string, ipAddress?: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200119>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountSubAccountApiIpRestrictionIpListDelete(email, subAccountApiKey, timestamp, signature, ipAddress, thirdPartyName, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - fromEmail and toEmail cannot be sent at the same time. - Return fromEmail equal master account email by default.  Weight(IP): 1
     * @summary Sub-account Spot Asset Transfer History (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [fromEmail] Sub-account email
     * @param {string} [toEmail] Sub-account email
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 1
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountSubTransferHistoryGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse20082>>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountSubTransferHistoryGet(timestamp, signature, fromEmail, toEmail, startTime, endTime, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Sub-account Transaction statistics (For Master Account).  Weight(UID): 60
     * @summary Query Sub-account Transaction Statistics (For Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountTransactionStatisticsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200120>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountTransactionStatisticsGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Transfer to Master (For Sub-account)
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountTransferSubToMasterPost(asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200101>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountTransferSubToMasterPost(asset, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Transfer to Sub-account of Same Master (For Sub-account)
     * @param {string} toEmail Recipient email
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountTransferSubToSubPost(toEmail: string, asset: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200101>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountTransferSubToSubPost(toEmail, asset, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - If `type` is not sent, the records of type 2: transfer out will be returned by default. - If `startTime` and `endTime` are not sent, the recent 30-day data will be returned.  Weight(IP): 1
     * @summary Sub-account Transfer History (For Sub-account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {number} [type] * &#x60;1&#x60; - transfer in * &#x60;2&#x60; - transfer out
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountTransferSubUserHistoryGet(timestamp: number, signature: string, asset?: string, type?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200102>>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountTransferSubUserHistoryGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - `fromEmail` and `toEmail` cannot be sent at the same time. - Return `fromEmail` equal master account email by default. - The query time period must be less then 30 days. - If startTime and endTime not sent, return records of the last 30 days by default.  Weight(IP): 1
     * @summary Universal Transfer History (For Master Account)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [fromEmail] Sub-account email
     * @param {string} [toEmail] Sub-account email
     * @param {string} [clientTranId] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 500, Max 500
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountUniversalTransferGet(timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, startTime?: number, endTime?: number, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200103>>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountUniversalTransferGet(timestamp, signature, fromEmail, toEmail, clientTranId, startTime, endTime, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - You need to enable \"internal transfer\" option for the api key which requests this endpoint. - Transfer from master account by default if fromEmail is not sent. - Transfer to master account by default if toEmail is not sent. - Supported transfer scenarios:   - Master account SPOT transfer to sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN   - Sub-account SPOT,USDT_FUTURE,COIN_FUTURE,MARGIN(Cross),ISOLATED_MARGIN transfer to master account SPOT   - Transfer between two sub-account SPOT accounts  Weight(IP): 1
     * @summary Universal Transfer (For Master Account)
     * @param {string} fromAccountType 
     * @param {string} toAccountType 
     * @param {string} asset 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [fromEmail] Sub-account email
     * @param {string} [toEmail] Sub-account email
     * @param {string} [clientTranId] 
     * @param {string} [symbol] Only supported under ISOLATED_MARGIN type
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountUniversalTransferPost(fromAccountType: string, toAccountType: string, asset: string, amount: number, timestamp: number, signature: string, fromEmail?: string, toEmail?: string, clientTranId?: string, symbol?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200104>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountUniversalTransferPost(fromAccountType, toAccountType, asset, amount, timestamp, signature, fromEmail, toEmail, clientTranId, symbol, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - This request will generate a virtual sub account under your master account. - You need to enable \"trade\" option for the api key which requests this endpoint.  Weight(IP): 1
     * @summary Create a Virtual Sub-account(For Master Account)
     * @param {string} subAccountString Please input a string. We will create a virtual email using that string for you to register
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV1SubAccountVirtualSubAccountPost(subAccountString: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20080>> {
        return SubAccountApiFp(this.configuration).sapiV1SubAccountVirtualSubAccountPost(subAccountString, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Detail on Sub-account's Futures Account V2 (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV2SubAccountFuturesAccountGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200105>> {
        return SubAccountApiFp(this.configuration).sapiV2SubAccountFuturesAccountGet(email, futuresType, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 10
     * @summary Summary of Sub-account's Futures Account V2 (For Master Account)
     * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [page] Default 1
     * @param {number} [limit] Default 10, Max 20
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV2SubAccountFuturesAccountSummaryGet(futuresType: number, timestamp: number, signature: string, page?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200106>> {
        return SubAccountApiFp(this.configuration).sapiV2SubAccountFuturesAccountSummaryGet(futuresType, timestamp, signature, page, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Futures Position-Risk of Sub-account V2 (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} futuresType * &#x60;1&#x60; - USDT Margined Futures * &#x60;2&#x60; - COIN Margined Futures
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV2SubAccountFuturesPositionRiskGet(email: string, futuresType: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200107>> {
        return SubAccountApiFp(this.configuration).sapiV2SubAccountFuturesPositionRiskGet(email, futuresType, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Update IP Restriction for Sub-Account API key  Weight(UID): 3000
     * @summary Update IP Restriction for Sub-Account API key (For Master Account)
     * @param {string} email Sub-account email
     * @param {string} subAccountApiKey 
     * @param {string} status IP Restriction status. 1 &#x3D; IP Unrestricted. 2 &#x3D; Restrict access to trusted IPs only. 3 &#x3D; Restrict access to users&#x27; trusted third party IPs only
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [thirdPartyName] third party IP list name
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV2SubAccountSubAccountApiIpRestrictionPost(email: string, subAccountApiKey: string, status: string, timestamp: number, signature: string, thirdPartyName?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200122>> {
        return SubAccountApiFp(this.configuration).sapiV2SubAccountSubAccountApiIpRestrictionPost(email, subAccountApiKey, status, timestamp, signature, thirdPartyName, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch sub-account assets  Weight(IP): 1
     * @summary Sub-account Assets (For Master Account)
     * @param {string} email Sub-account email
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV3SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20085>> {
        return SubAccountApiFp(this.configuration).sapiV3SubAccountAssetsGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Fetch sub-account assets  Weight(UID): 60
     * @summary Query Sub-account Assets (For Master Account)
     * @param {string} email 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SubAccountApi
     */
    public async sapiV4SubAccountAssetsGet(email: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200123>> {
        return SubAccountApiFp(this.configuration).sapiV4SubAccountAssetsGet(email, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
