/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200153 } from '../models';
import { InlineResponse200154 } from '../models';
import { InlineResponse200155 } from '../models';
import { InlineResponse200156 } from '../models';
import { InlineResponse200157 } from '../models';
/**
 * FuturesAlgoApi - axios parameter creator
 * @export
 */
export const FuturesAlgoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Historical Algo Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [symbol] Trading symbol, e.g. BNBUSDT
         * @param {string} [side] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesHistoricalOrdersGet: async (timestamp: number, signature: string, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesHistoricalOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesHistoricalOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/futures/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000
         * @summary Time-Weighted Average Price(Twap) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {number} duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesNewOrderTwapPost: async (symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            // verify required parameter 'side' is not null or undefined
            if (side === null || side === undefined) {
                throw new RequiredError('side','Required parameter side was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesNewOrderTwapPost.');
            }
            const localVarPath = `/sapi/v1/algo/futures/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (positionSide !== undefined) {
                localVarQueryParameter['positionSide'] = positionSide;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (clientAlgoId !== undefined) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (reduceOnly !== undefined) {
                localVarQueryParameter['reduceOnly'] = reduceOnly;
            }

            if (limitPrice !== undefined) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {string} urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesNewOrderVpPost: async (symbol: string, side: string, quantity: number, urgency: string, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            // verify required parameter 'side' is not null or undefined
            if (side === null || side === undefined) {
                throw new RequiredError('side','Required parameter side was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            // verify required parameter 'urgency' is not null or undefined
            if (urgency === null || urgency === undefined) {
                throw new RequiredError('urgency','Required parameter urgency was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesNewOrderVpPost.');
            }
            const localVarPath = `/sapi/v1/algo/futures/newOrderVp`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (positionSide !== undefined) {
                localVarQueryParameter['positionSide'] = positionSide;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (urgency !== undefined) {
                localVarQueryParameter['urgency'] = urgency;
            }

            if (clientAlgoId !== undefined) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (reduceOnly !== undefined) {
                localVarQueryParameter['reduceOnly'] = reduceOnly;
            }

            if (limitPrice !== undefined) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Current Algo Open Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesOpenOrdersGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesOpenOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesOpenOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/futures/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId Eg. 14511
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesOrderDelete: async (algoId: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            if (algoId === null || algoId === undefined) {
                throw new RequiredError('algoId','Required parameter algoId was null or undefined when calling sapiV1AlgoFuturesOrderDelete.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesOrderDelete.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesOrderDelete.');
            }
            const localVarPath = `/sapi/v1/algo/futures/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Sub Orders (USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoFuturesSubOrdersGet: async (algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            if (algoId === null || algoId === undefined) {
                throw new RequiredError('algoId','Required parameter algoId was null or undefined when calling sapiV1AlgoFuturesSubOrdersGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoFuturesSubOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoFuturesSubOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/futures/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * FuturesAlgoApi - functional programming interface
 * @export
 */
export const FuturesAlgoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Historical Algo Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [symbol] Trading symbol, e.g. BNBUSDT
         * @param {string} [side] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesHistoricalOrdersGet(timestamp: number, signature: string, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200156>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesHistoricalOrdersGet(timestamp, signature, symbol, side, startTime, endTime, page, pageSize, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000
         * @summary Time-Weighted Average Price(Twap) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {number} duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200153>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {string} urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesNewOrderVpPost(symbol: string, side: string, quantity: number, urgency: string, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200153>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesNewOrderVpPost(symbol, side, quantity, urgency, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Current Algo Open Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200155>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesOpenOrdersGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId Eg. 14511
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200154>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesOrderDelete(algoId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Sub Orders (USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200157>>> {
            const localVarAxiosArgs = await FuturesAlgoApiAxiosParamCreator(configuration).sapiV1AlgoFuturesSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * FuturesAlgoApi - factory interface
 * @export
 */
export const FuturesAlgoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Historical Algo Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [symbol] Trading symbol, e.g. BNBUSDT
         * @param {string} [side] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesHistoricalOrdersGet(timestamp: number, signature: string, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200156>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesHistoricalOrdersGet(timestamp, signature, symbol, side, startTime, endTime, page, pageSize, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000
         * @summary Time-Weighted Average Price(Twap) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {number} duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200153>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000
         * @summary Volume Participation(VP) New Order (TRADE)
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
         * @param {string} urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
         * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
         * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
         * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesNewOrderVpPost(symbol: string, side: string, quantity: number, urgency: string, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200153>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesNewOrderVpPost(symbol, side, quantity, urgency, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Current Algo Open Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200155>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesOpenOrdersGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Cancel Algo Order(TRADE)
         * @param {number} algoId Eg. 14511
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200154>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesOrderDelete(algoId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
         * @summary Query Sub Orders (USER_DATA)
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoFuturesSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200157>> {
            return FuturesAlgoApiFp(configuration).sapiV1AlgoFuturesSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * FuturesAlgoApi - object-oriented interface
 * @export
 * @class FuturesAlgoApi
 * @extends {BaseAPI}
 */
export class FuturesAlgoApi extends BaseAPI {
    /**
     * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
     * @summary Query Historical Algo Orders (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [symbol] Trading symbol, e.g. BNBUSDT
     * @param {string} [side] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesHistoricalOrdersGet(timestamp: number, signature: string, symbol?: string, side?: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200156>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesHistoricalOrdersGet(timestamp, signature, symbol, side, startTime, endTime, page, pageSize, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send in a Twap new order. Only support on USDⓈ-M Contracts.  You need to enable Futures Trading Permission for the api key which requests this endpoint. Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it. - quantity * 60 / duration should be larger than minQty - duration cannot be less than 5 mins or more than 24 hours. - For delivery contracts, TWAP end time should be one hour earlier than the delivery time of the symbol.  Weight(UID): 3000
     * @summary Time-Weighted Average Price(Twap) New Order (TRADE)
     * @param {string} symbol Trading symbol, e.g. BNBUSDT
     * @param {string} side 
     * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
     * @param {number} duration Duration for TWAP orders in seconds. [300, 86400];Less than 5min &#x3D;&gt; defaults to 5 min; Greater than 24h &#x3D;&gt; defaults to 24h
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
     * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
     * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
     * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200153>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Send in a VP new order. Only support on USDⓈ-M Contracts.  - You need to enable `Futures Trading Permission` for the api key which requests this endpoint. - Base URL: https://api.binance.com  - Total Algo open orders max allowed: 10 orders. - Leverage of symbols and position mode will be the same as your futures account settings. You can set up through the trading page or fapi. - Receiving \"success\": true does not mean that your order will be executed. Please use the query order endpoints(GET sapi/v1/algo/futures/openOrders or GET sapi/v1/algo/futures/historicalOrders) to check the order status. For example: Your futures balance is insufficient, or open position with reduce only or position side is inconsistent with your own setting. In these cases you will receive \"success\": true, but the order status will be expired after we check it.  Weight(UID): 3000
     * @summary Volume Participation(VP) New Order (TRADE)
     * @param {string} symbol Trading symbol, e.g. BNBUSDT
     * @param {string} side 
     * @param {number} quantity Quantity of base asset; The notional (quantity * mark price(base asset)) must be more than the equivalent of 10,000 USDT and less than the equivalent of 1,000,000 USDT
     * @param {string} urgency Represent the relative speed of the current execution; ENUM: LOW, MEDIUM, HIGH
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionSide] Default BOTH for One-way Mode ; LONG or SHORT for Hedge Mode. It must be sent in Hedge Mode.
     * @param {string} [clientAlgoId] A unique id among Algo orders (length should be 32 characters)， If it is not sent, we will give default value
     * @param {boolean} [reduceOnly] &#x27;true&#x27; or &#x27;false&#x27;. Default &#x27;false&#x27;; Cannot be sent in Hedge Mode; Cannot be sent when you open a position
     * @param {number} [limitPrice] Limit price of the order; If it is not sent, will place order by market price by default
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesNewOrderVpPost(symbol: string, side: string, quantity: number, urgency: string, timestamp: number, signature: string, positionSide?: string, clientAlgoId?: string, reduceOnly?: boolean, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200153>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesNewOrderVpPost(symbol, side, quantity, urgency, timestamp, signature, positionSide, clientAlgoId, reduceOnly, limitPrice, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
     * @summary Query Current Algo Open Orders (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200155>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesOpenOrdersGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancel an active order. - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
     * @summary Cancel Algo Order(TRADE)
     * @param {number} algoId Eg. 14511
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200154>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesOrderDelete(algoId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - You need to enable Futures Trading Permission for the api key which requests this endpoint. - Base URL: https://api.binance.com  Weight(IP): 1
     * @summary Query Sub Orders (USER_DATA)
     * @param {number} algoId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [page] Default 1
     * @param {string} [pageSize] Page size, minimum 1, maximum 100, default 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof FuturesAlgoApi
     */
    public async sapiV1AlgoFuturesSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200157>> {
        return FuturesAlgoApiFp(this.configuration).sapiV1AlgoFuturesSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
