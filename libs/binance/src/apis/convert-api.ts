/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200224 } from '../models';
import { InlineResponse200225 } from '../models';
import { InlineResponse200226 } from '../models';
import { InlineResponse200227 } from '../models';
import { InlineResponse200228 } from '../models';
import { InlineResponse200229 } from '../models';
/**
 * ConvertApi - axios parameter creator
 * @export
 */
export const ConvertApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Accept the offered quote by quote ID.  Weight(UID): 500
         * @summary Accept Quote (TRADE)
         * @param {string} quoteId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertAcceptQuotePost: async (quoteId: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'quoteId' is not null or undefined
            if (quoteId === null || quoteId === undefined) {
                throw new RequiredError('quoteId','Required parameter quoteId was null or undefined when calling sapiV1ConvertAcceptQuotePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ConvertAcceptQuotePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ConvertAcceptQuotePost.');
            }
            const localVarPath = `/sapi/v1/convert/acceptQuote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (quoteId !== undefined) {
                localVarQueryParameter['quoteId'] = quoteId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for supported asset precision information  Weight(IP): 100
         * @summary Query order quantity precision per asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertAssetInfoGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ConvertAssetInfoGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ConvertAssetInfoGet.');
            }
            const localVarPath = `/sapi/v1/convert/assetInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query for all convertible token pairs and the tokensâ€™ respective upper/lower limits  Weight(IP): 3000
         * @summary List All Convert Pairs
         * @param {string} [fromAsset] User spends coin
         * @param {string} [toAsset] User receives coin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertExchangeInfoGet: async (fromAsset?: string, toAsset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/convert/exchangeInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (fromAsset !== undefined) {
                localVarQueryParameter['fromAsset'] = fromAsset;
            }

            if (toAsset !== undefined) {
                localVarQueryParameter['toAsset'] = toAsset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Request a quote for the requested token pairs  Weight(UID): 200
         * @summary Send quote request (USER_DATA)
         * @param {string} fromAsset 
         * @param {string} toAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [fromAmount] When specified, it is the amount you will be debited after the conversion
         * @param {number} [toAmount] When specified, it is the amount you will be debited after the conversion
         * @param {string} [validTime] 10s, 30s, 1m, 2m, default 10s
         * @param {string} [walletType] SPOT or FUNDING. Default is SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertGetQuotePost: async (fromAsset: string, toAsset: string, timestamp: number, signature: string, fromAmount?: number, toAmount?: number, validTime?: string, walletType?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'fromAsset' is not null or undefined
            if (fromAsset === null || fromAsset === undefined) {
                throw new RequiredError('fromAsset','Required parameter fromAsset was null or undefined when calling sapiV1ConvertGetQuotePost.');
            }
            // verify required parameter 'toAsset' is not null or undefined
            if (toAsset === null || toAsset === undefined) {
                throw new RequiredError('toAsset','Required parameter toAsset was null or undefined when calling sapiV1ConvertGetQuotePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ConvertGetQuotePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ConvertGetQuotePost.');
            }
            const localVarPath = `/sapi/v1/convert/getQuote`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (fromAsset !== undefined) {
                localVarQueryParameter['fromAsset'] = fromAsset;
            }

            if (toAsset !== undefined) {
                localVarQueryParameter['toAsset'] = toAsset;
            }

            if (fromAmount !== undefined) {
                localVarQueryParameter['fromAmount'] = fromAmount;
            }

            if (toAmount !== undefined) {
                localVarQueryParameter['toAmount'] = toAmount;
            }

            if (validTime !== undefined) {
                localVarQueryParameter['validTime'] = validTime;
            }

            if (walletType !== undefined) {
                localVarQueryParameter['walletType'] = walletType;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query order status by order ID.  Weight(UID): 100
         * @summary Order status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [orderId] 
         * @param {string} [quoteId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertOrderStatusGet: async (timestamp: number, signature: string, orderId?: string, quoteId?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ConvertOrderStatusGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ConvertOrderStatusGet.');
            }
            const localVarPath = `/sapi/v1/convert/orderStatus`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (quoteId !== undefined) {
                localVarQueryParameter['quoteId'] = quoteId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000
         * @summary Get Convert Trade History (USER_DATA)
         * @param {number} startTime UTC timestamp in ms
         * @param {number} endTime UTC timestamp in ms
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [limit] default 100, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1ConvertTradeFlowGet: async (startTime: number, endTime: number, timestamp: number, signature: string, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'startTime' is not null or undefined
            if (startTime === null || startTime === undefined) {
                throw new RequiredError('startTime','Required parameter startTime was null or undefined when calling sapiV1ConvertTradeFlowGet.');
            }
            // verify required parameter 'endTime' is not null or undefined
            if (endTime === null || endTime === undefined) {
                throw new RequiredError('endTime','Required parameter endTime was null or undefined when calling sapiV1ConvertTradeFlowGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1ConvertTradeFlowGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1ConvertTradeFlowGet.');
            }
            const localVarPath = `/sapi/v1/convert/tradeFlow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * ConvertApi - functional programming interface
 * @export
 */
export const ConvertApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Accept the offered quote by quote ID.  Weight(UID): 500
         * @summary Accept Quote (TRADE)
         * @param {string} quoteId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertAcceptQuotePost(quoteId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200227>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertAcceptQuotePost(quoteId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for supported asset precision information  Weight(IP): 100
         * @summary Query order quantity precision per asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertAssetInfoGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200225>>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertAssetInfoGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query for all convertible token pairs and the tokensâ€™ respective upper/lower limits  Weight(IP): 3000
         * @summary List All Convert Pairs
         * @param {string} [fromAsset] User spends coin
         * @param {string} [toAsset] User receives coin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertExchangeInfoGet(fromAsset?: string, toAsset?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200224>>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertExchangeInfoGet(fromAsset, toAsset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Request a quote for the requested token pairs  Weight(UID): 200
         * @summary Send quote request (USER_DATA)
         * @param {string} fromAsset 
         * @param {string} toAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [fromAmount] When specified, it is the amount you will be debited after the conversion
         * @param {number} [toAmount] When specified, it is the amount you will be debited after the conversion
         * @param {string} [validTime] 10s, 30s, 1m, 2m, default 10s
         * @param {string} [walletType] SPOT or FUNDING. Default is SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertGetQuotePost(fromAsset: string, toAsset: string, timestamp: number, signature: string, fromAmount?: number, toAmount?: number, validTime?: string, walletType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200226>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertGetQuotePost(fromAsset, toAsset, timestamp, signature, fromAmount, toAmount, validTime, walletType, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query order status by order ID.  Weight(UID): 100
         * @summary Order status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [orderId] 
         * @param {string} [quoteId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertOrderStatusGet(timestamp: number, signature: string, orderId?: string, quoteId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200228>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertOrderStatusGet(timestamp, signature, orderId, quoteId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000
         * @summary Get Convert Trade History (USER_DATA)
         * @param {number} startTime UTC timestamp in ms
         * @param {number} endTime UTC timestamp in ms
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [limit] default 100, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertTradeFlowGet(startTime: number, endTime: number, timestamp: number, signature: string, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200229>>> {
            const localVarAxiosArgs = await ConvertApiAxiosParamCreator(configuration).sapiV1ConvertTradeFlowGet(startTime, endTime, timestamp, signature, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * ConvertApi - factory interface
 * @export
 */
export const ConvertApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Accept the offered quote by quote ID.  Weight(UID): 500
         * @summary Accept Quote (TRADE)
         * @param {string} quoteId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertAcceptQuotePost(quoteId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200227>> {
            return ConvertApiFp(configuration).sapiV1ConvertAcceptQuotePost(quoteId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for supported asset precision information  Weight(IP): 100
         * @summary Query order quantity precision per asset (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertAssetInfoGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200225>>> {
            return ConvertApiFp(configuration).sapiV1ConvertAssetInfoGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query for all convertible token pairs and the tokensâ€™ respective upper/lower limits  Weight(IP): 3000
         * @summary List All Convert Pairs
         * @param {string} [fromAsset] User spends coin
         * @param {string} [toAsset] User receives coin
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertExchangeInfoGet(fromAsset?: string, toAsset?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200224>>> {
            return ConvertApiFp(configuration).sapiV1ConvertExchangeInfoGet(fromAsset, toAsset, options).then((request) => request(axios, basePath));
        },
        /**
         * Request a quote for the requested token pairs  Weight(UID): 200
         * @summary Send quote request (USER_DATA)
         * @param {string} fromAsset 
         * @param {string} toAsset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [fromAmount] When specified, it is the amount you will be debited after the conversion
         * @param {number} [toAmount] When specified, it is the amount you will be debited after the conversion
         * @param {string} [validTime] 10s, 30s, 1m, 2m, default 10s
         * @param {string} [walletType] SPOT or FUNDING. Default is SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertGetQuotePost(fromAsset: string, toAsset: string, timestamp: number, signature: string, fromAmount?: number, toAmount?: number, validTime?: string, walletType?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200226>> {
            return ConvertApiFp(configuration).sapiV1ConvertGetQuotePost(fromAsset, toAsset, timestamp, signature, fromAmount, toAmount, validTime, walletType, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query order status by order ID.  Weight(UID): 100
         * @summary Order status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [orderId] 
         * @param {string} [quoteId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertOrderStatusGet(timestamp: number, signature: string, orderId?: string, quoteId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200228>> {
            return ConvertApiFp(configuration).sapiV1ConvertOrderStatusGet(timestamp, signature, orderId, quoteId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000
         * @summary Get Convert Trade History (USER_DATA)
         * @param {number} startTime UTC timestamp in ms
         * @param {number} endTime UTC timestamp in ms
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [limit] default 100, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1ConvertTradeFlowGet(startTime: number, endTime: number, timestamp: number, signature: string, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200229>> {
            return ConvertApiFp(configuration).sapiV1ConvertTradeFlowGet(startTime, endTime, timestamp, signature, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * ConvertApi - object-oriented interface
 * @export
 * @class ConvertApi
 * @extends {BaseAPI}
 */
export class ConvertApi extends BaseAPI {
    /**
     * Accept the offered quote by quote ID.  Weight(UID): 500
     * @summary Accept Quote (TRADE)
     * @param {string} quoteId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertAcceptQuotePost(quoteId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200227>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertAcceptQuotePost(quoteId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for supported asset precision information  Weight(IP): 100
     * @summary Query order quantity precision per asset (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertAssetInfoGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200225>>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertAssetInfoGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query for all convertible token pairs and the tokensâ€™ respective upper/lower limits  Weight(IP): 3000
     * @summary List All Convert Pairs
     * @param {string} [fromAsset] User spends coin
     * @param {string} [toAsset] User receives coin
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertExchangeInfoGet(fromAsset?: string, toAsset?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200224>>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertExchangeInfoGet(fromAsset, toAsset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Request a quote for the requested token pairs  Weight(UID): 200
     * @summary Send quote request (USER_DATA)
     * @param {string} fromAsset 
     * @param {string} toAsset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [fromAmount] When specified, it is the amount you will be debited after the conversion
     * @param {number} [toAmount] When specified, it is the amount you will be debited after the conversion
     * @param {string} [validTime] 10s, 30s, 1m, 2m, default 10s
     * @param {string} [walletType] SPOT or FUNDING. Default is SPOT
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertGetQuotePost(fromAsset: string, toAsset: string, timestamp: number, signature: string, fromAmount?: number, toAmount?: number, validTime?: string, walletType?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200226>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertGetQuotePost(fromAsset, toAsset, timestamp, signature, fromAmount, toAmount, validTime, walletType, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query order status by order ID.  Weight(UID): 100
     * @summary Order status (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [orderId] 
     * @param {string} [quoteId] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertOrderStatusGet(timestamp: number, signature: string, orderId?: string, quoteId?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200228>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertOrderStatusGet(timestamp, signature, orderId, quoteId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - The max interval between startTime and endTime is 30 days.  Weight(UID): 3000
     * @summary Get Convert Trade History (USER_DATA)
     * @param {number} startTime UTC timestamp in ms
     * @param {number} endTime UTC timestamp in ms
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [limit] default 100, max 1000
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ConvertApi
     */
    public async sapiV1ConvertTradeFlowGet(startTime: number, endTime: number, timestamp: number, signature: string, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200229>> {
        return ConvertApiFp(this.configuration).sapiV1ConvertTradeFlowGet(startTime, endTime, timestamp, signature, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
