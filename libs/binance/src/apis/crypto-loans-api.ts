/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200202 } from '../models';
import { InlineResponse200203 } from '../models';
import { InlineResponse200204 } from '../models';
import { InlineResponse200205 } from '../models';
import { InlineResponse200206 } from '../models';
import { InlineResponse200207 } from '../models';
import { InlineResponse200208 } from '../models';
import { InlineResponse200209 } from '../models';
import { InlineResponse200210 } from '../models';
import { InlineResponse200211 } from '../models';
import { InlineResponse200212 } from '../models';
import { InlineResponse200213 } from '../models';
import { InlineResponse200214 } from '../models';
import { InlineResponse200215 } from '../models';
import { InlineResponse200216 } from '../models';
import { InlineResponse200217 } from '../models';
import { InlineResponse200218 } from '../models';
import { InlineResponse200219 } from '../models';
import { InlineResponse200220 } from '../models';
import { InlineResponse200221 } from '../models';
import { InlineResponse200222 } from '../models';
/**
 * CryptoLoansApi - axios parameter creator
 * @export
 */
export const CryptoLoansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Adjust LTV (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Amount
         * @param {string} direction &#x27;ADDITIONAL&#x27;, &#x27;REDUCED&#x27;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanAdjustLtvPost: async (orderId: number, amount: number, direction: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling sapiV1LoanAdjustLtvPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1LoanAdjustLtvPost.');
            }
            // verify required parameter 'direction' is not null or undefined
            if (direction === null || direction === undefined) {
                throw new RequiredError('direction','Required parameter direction was null or undefined when calling sapiV1LoanAdjustLtvPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanAdjustLtvPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanAdjustLtvPost.');
            }
            const localVarPath = `/sapi/v1/loan/adjust/ltv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Crypto Loans Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanBorrowHistoryGet: async (timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanBorrowHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanBorrowHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/borrow/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Borrow (TRADE)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} loanTerm 7/14/30/90/180 days
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [loanAmount] Loan amount
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanBorrowPost: async (loanCoin: string, collateralCoin: string, loanTerm: number, timestamp: number, signature: string, loanAmount?: number, collateralAmount?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            if (loanCoin === null || loanCoin === undefined) {
                throw new RequiredError('loanCoin','Required parameter loanCoin was null or undefined when calling sapiV1LoanBorrowPost.');
            }
            // verify required parameter 'collateralCoin' is not null or undefined
            if (collateralCoin === null || collateralCoin === undefined) {
                throw new RequiredError('collateralCoin','Required parameter collateralCoin was null or undefined when calling sapiV1LoanBorrowPost.');
            }
            // verify required parameter 'loanTerm' is not null or undefined
            if (loanTerm === null || loanTerm === undefined) {
                throw new RequiredError('loanTerm','Required parameter loanTerm was null or undefined when calling sapiV1LoanBorrowPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanBorrowPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanBorrowPost.');
            }
            const localVarPath = `/sapi/v1/loan/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (loanAmount !== undefined) {
                localVarQueryParameter['loanAmount'] = loanAmount;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (collateralAmount !== undefined) {
                localVarQueryParameter['collateralAmount'] = collateralAmount;
            }

            if (loanTerm !== undefined) {
                localVarQueryParameter['loanTerm'] = loanTerm;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanCollateralDataGet: async (timestamp: number, signature: string, collateralCoin?: string, vipLevel?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanCollateralDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanCollateralDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/collateral/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Customize margin call for ongoing orders only.  Weight(UID): 6000
         * @summary Crypto Loan Customize Margin Call (TRADE)
         * @param {number} marginCall 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanCustomizeMarginCallPost: async (marginCall: number, timestamp: number, signature: string, orderId?: number, collateralCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'marginCall' is not null or undefined
            if (marginCall === null || marginCall === undefined) {
                throw new RequiredError('marginCall','Required parameter marginCall was null or undefined when calling sapiV1LoanCustomizeMarginCallPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanCustomizeMarginCallPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanCustomizeMarginCallPost.');
            }
            const localVarPath = `/sapi/v1/loan/customize/margin_call`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (marginCall !== undefined) {
                localVarQueryParameter['marginCall'] = marginCall;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(UID): 6000
         * @summary Adjust LTV - Flexible Loan Adjust LTV (TRADE)
         * @param {number} adjustmentAmount 
         * @param {string} direction 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleAdjustLtvPost: async (adjustmentAmount: number, direction: string, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'adjustmentAmount' is not null or undefined
            if (adjustmentAmount === null || adjustmentAmount === undefined) {
                throw new RequiredError('adjustmentAmount','Required parameter adjustmentAmount was null or undefined when calling sapiV1LoanFlexibleAdjustLtvPost.');
            }
            // verify required parameter 'direction' is not null or undefined
            if (direction === null || direction === undefined) {
                throw new RequiredError('direction','Required parameter direction was null or undefined when calling sapiV1LoanFlexibleAdjustLtvPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleAdjustLtvPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleAdjustLtvPost.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/adjust/ltv`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (adjustmentAmount !== undefined) {
                localVarQueryParameter['adjustmentAmount'] = adjustmentAmount;
            }

            if (direction !== undefined) {
                localVarQueryParameter['direction'] = direction;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Borrow - Get Flexible Loan Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleBorrowHistoryGet: async (timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleBorrowHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleBorrowHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/borrow/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(UID): 6000
         * @summary Borrow - Flexible Loan Borrow (TRADE)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanAmount] Loan amount
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleBorrowPost: async (timestamp: number, signature: string, loanCoin?: string, loanAmount?: number, collateralCoin?: string, collateralAmount?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleBorrowPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleBorrowPost.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (loanAmount !== undefined) {
                localVarQueryParameter['loanAmount'] = loanAmount;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (collateralAmount !== undefined) {
                localVarQueryParameter['collateralAmount'] = collateralAmount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleCollateralDataGet: async (timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleCollateralDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleCollateralDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/collateral/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleLoanableDataGet: async (timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleLoanableDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleLoanableDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/loanable/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleLtvAdjustmentHistoryGet: async (timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleLtvAdjustmentHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleLtvAdjustmentHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/ltv/adjustment/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(IP): 300
         * @summary Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleOngoingOrdersGet: async (timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleOngoingOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleOngoingOrdersGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/ongoing/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Repay - Get Flexible Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleRepayHistoryGet: async (timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleRepayHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleRepayHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         *  Weight(IP): 6000
         * @summary Repay - Flexible Loan Repay (TRADE)
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {boolean} [collateralReturn] 
         * @param {boolean} [fullRepayment] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanFlexibleRepayPost: async (repayAmount: number, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'repayAmount' is not null or undefined
            if (repayAmount === null || repayAmount === undefined) {
                throw new RequiredError('repayAmount','Required parameter repayAmount was null or undefined when calling sapiV1LoanFlexibleRepayPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanFlexibleRepayPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanFlexibleRepayPost.');
            }
            const localVarPath = `/sapi/v1/loan/flexible/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (repayAmount !== undefined) {
                localVarQueryParameter['repayAmount'] = repayAmount;
            }

            if (collateralReturn !== undefined) {
                localVarQueryParameter['collateralReturn'] = collateralReturn;
            }

            if (fullRepayment !== undefined) {
                localVarQueryParameter['fullRepayment'] = fullRepayment;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000
         * @summary Get Crypto Loans Income History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [type] All types will be returned by default.   * &#x60;borrowIn&#x60;   * &#x60;collateralSpent&#x60;   * &#x60;repayAmount&#x60;   * &#x60;collateralReturn&#x60; - Collateral return after repayment   * &#x60;addCollateral&#x60;   * &#x60;removeCollateral&#x60;   * &#x60;collateralReturnAfterLiquidation&#x60;
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 20, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanIncomeGet: async (timestamp: number, signature: string, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanIncomeGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanIncomeGet.');
            }
            const localVarPath = `/sapi/v1/loan/income`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanLoanableDataGet: async (timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanLoanableDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanLoanableDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/loanable/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanLtvAdjustmentHistoryGet: async (timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanLtvAdjustmentHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanLtvAdjustmentHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/ltv/adjustment/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 300
         * @summary Get Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1; default:1, max:1000
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanOngoingOrdersGet: async (timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanOngoingOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanOngoingOrdersGet.');
            }
            const localVarPath = `/sapi/v1/loan/ongoing/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanRepayCollateralRateGet: async (loanCoin: string, collateralCoin: string, repayAmount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanCoin' is not null or undefined
            if (loanCoin === null || loanCoin === undefined) {
                throw new RequiredError('loanCoin','Required parameter loanCoin was null or undefined when calling sapiV1LoanRepayCollateralRateGet.');
            }
            // verify required parameter 'collateralCoin' is not null or undefined
            if (collateralCoin === null || collateralCoin === undefined) {
                throw new RequiredError('collateralCoin','Required parameter collateralCoin was null or undefined when calling sapiV1LoanRepayCollateralRateGet.');
            }
            // verify required parameter 'repayAmount' is not null or undefined
            if (repayAmount === null || repayAmount === undefined) {
                throw new RequiredError('repayAmount','Required parameter repayAmount was null or undefined when calling sapiV1LoanRepayCollateralRateGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanRepayCollateralRateGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanRepayCollateralRateGet.');
            }
            const localVarPath = `/sapi/v1/loan/repay/collateral/rate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (repayAmount !== undefined) {
                localVarQueryParameter['repayAmount'] = repayAmount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanRepayHistoryGet: async (timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanRepayHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanRepayHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Repay (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Repayment Amount
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [type] Default: 1. 1 for &#x27;repay with borrowed coin&#x27;; 2 for &#x27;repay with collateral&#x27;.
         * @param {boolean} [collateralReturn] Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanRepayPost: async (orderId: number, amount: number, timestamp: number, signature: string, type?: number, collateralReturn?: boolean, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'orderId' is not null or undefined
            if (orderId === null || orderId === undefined) {
                throw new RequiredError('orderId','Required parameter orderId was null or undefined when calling sapiV1LoanRepayPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1LoanRepayPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanRepayPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanRepayPost.');
            }
            const localVarPath = `/sapi/v1/loan/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (collateralReturn !== undefined) {
                localVarQueryParameter['collateralReturn'] = collateralReturn;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * CryptoLoansApi - functional programming interface
 * @export
 */
export const CryptoLoansApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Adjust LTV (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Amount
         * @param {string} direction &#x27;ADDITIONAL&#x27;, &#x27;REDUCED&#x27;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanAdjustLtvPost(orderId: number, amount: number, direction: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200208>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanAdjustLtvPost(orderId, amount, direction, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Crypto Loans Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanBorrowHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200204>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanBorrowHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Borrow (TRADE)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} loanTerm 7/14/30/90/180 days
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [loanAmount] Loan amount
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanBorrowPost(loanCoin: string, collateralCoin: string, loanTerm: number, timestamp: number, signature: string, loanAmount?: number, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200203>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanBorrowPost(loanCoin, collateralCoin, loanTerm, timestamp, signature, loanAmount, collateralAmount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200211>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanCollateralDataGet(timestamp, signature, collateralCoin, vipLevel, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Customize margin call for ongoing orders only.  Weight(UID): 6000
         * @summary Crypto Loan Customize Margin Call (TRADE)
         * @param {number} marginCall 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanCustomizeMarginCallPost(marginCall: number, timestamp: number, signature: string, orderId?: number, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200213>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanCustomizeMarginCallPost(marginCall, timestamp, signature, orderId, collateralCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(UID): 6000
         * @summary Adjust LTV - Flexible Loan Adjust LTV (TRADE)
         * @param {number} adjustmentAmount 
         * @param {string} direction 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount: number, direction: string, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200219>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount, direction, timestamp, signature, loanCoin, collateralCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Borrow - Get Flexible Loan Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleBorrowHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200216>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleBorrowHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(UID): 6000
         * @summary Borrow - Flexible Loan Borrow (TRADE)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanAmount] Loan amount
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleBorrowPost(timestamp: number, signature: string, loanCoin?: string, loanAmount?: number, collateralCoin?: string, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200214>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleBorrowPost(timestamp, signature, loanCoin, loanAmount, collateralCoin, collateralAmount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200222>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200221>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleLoanableDataGet(timestamp, signature, loanCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200220>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(IP): 300
         * @summary Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleOngoingOrdersGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200215>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleOngoingOrdersGet(timestamp, signature, loanCoin, collateralCoin, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(IP): 400
         * @summary Repay - Get Flexible Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleRepayHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200218>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleRepayHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         *  Weight(IP): 6000
         * @summary Repay - Flexible Loan Repay (TRADE)
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {boolean} [collateralReturn] 
         * @param {boolean} [fullRepayment] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleRepayPost(repayAmount: number, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200217>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanFlexibleRepayPost(repayAmount, timestamp, signature, loanCoin, collateralCoin, collateralReturn, fullRepayment, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000
         * @summary Get Crypto Loans Income History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [type] All types will be returned by default.   * &#x60;borrowIn&#x60;   * &#x60;collateralSpent&#x60;   * &#x60;repayAmount&#x60;   * &#x60;collateralReturn&#x60; - Collateral return after repayment   * &#x60;addCollateral&#x60;   * &#x60;removeCollateral&#x60;   * &#x60;collateralReturnAfterLiquidation&#x60;
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 20, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanIncomeGet(timestamp: number, signature: string, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200202>>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanIncomeGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200210>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanLtvAdjustmentHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200209>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanLtvAdjustmentHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 300
         * @summary Get Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1; default:1, max:1000
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200205>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanOngoingOrdersGet(timestamp, signature, orderId, loanCoin, collateralCoin, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayCollateralRateGet(loanCoin: string, collateralCoin: string, repayAmount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200212>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanRepayCollateralRateGet(loanCoin, collateralCoin, repayAmount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200207>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanRepayHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Repay (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Repayment Amount
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [type] Default: 1. 1 for &#x27;repay with borrowed coin&#x27;; 2 for &#x27;repay with collateral&#x27;.
         * @param {boolean} [collateralReturn] Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayPost(orderId: number, amount: number, timestamp: number, signature: string, type?: number, collateralReturn?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200206>>> {
            const localVarAxiosArgs = await CryptoLoansApiAxiosParamCreator(configuration).sapiV1LoanRepayPost(orderId, amount, timestamp, signature, type, collateralReturn, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * CryptoLoansApi - factory interface
 * @export
 */
export const CryptoLoansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Adjust LTV (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Amount
         * @param {string} direction &#x27;ADDITIONAL&#x27;, &#x27;REDUCED&#x27;
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanAdjustLtvPost(orderId: number, amount: number, direction: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200208>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanAdjustLtvPost(orderId, amount, direction, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Crypto Loans Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanBorrowHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200204>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanBorrowHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Borrow (TRADE)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} loanTerm 7/14/30/90/180 days
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [loanAmount] Loan amount
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanBorrowPost(loanCoin: string, collateralCoin: string, loanTerm: number, timestamp: number, signature: string, loanAmount?: number, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200203>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanBorrowPost(loanCoin, collateralCoin, loanTerm, timestamp, signature, loanAmount, collateralAmount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200211>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanCollateralDataGet(timestamp, signature, collateralCoin, vipLevel, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Customize margin call for ongoing orders only.  Weight(UID): 6000
         * @summary Crypto Loan Customize Margin Call (TRADE)
         * @param {number} marginCall 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanCustomizeMarginCallPost(marginCall: number, timestamp: number, signature: string, orderId?: number, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200213>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanCustomizeMarginCallPost(marginCall, timestamp, signature, orderId, collateralCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(UID): 6000
         * @summary Adjust LTV - Flexible Loan Adjust LTV (TRADE)
         * @param {number} adjustmentAmount 
         * @param {string} direction 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount: number, direction: string, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200219>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount, direction, timestamp, signature, loanCoin, collateralCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(IP): 400
         * @summary Borrow - Get Flexible Loan Borrow History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleBorrowHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200216>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleBorrowHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(UID): 6000
         * @summary Borrow - Flexible Loan Borrow (TRADE)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanAmount] Loan amount
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [collateralAmount] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleBorrowPost(timestamp: number, signature: string, loanCoin?: string, loanAmount?: number, collateralCoin?: string, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200214>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleBorrowPost(timestamp, signature, loanCoin, loanAmount, collateralCoin, collateralAmount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Collateral Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200222>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Flexible Loan Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200221>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleLoanableDataGet(timestamp, signature, loanCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(IP): 400
         * @summary Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200220>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(IP): 300
         * @summary Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleOngoingOrdersGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200215>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleOngoingOrdersGet(timestamp, signature, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(IP): 400
         * @summary Repay - Get Flexible Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleRepayHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200218>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleRepayHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         *  Weight(IP): 6000
         * @summary Repay - Flexible Loan Repay (TRADE)
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {boolean} [collateralReturn] 
         * @param {boolean} [fullRepayment] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanFlexibleRepayPost(repayAmount: number, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200217>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanFlexibleRepayPost(repayAmount, timestamp, signature, loanCoin, collateralCoin, collateralReturn, fullRepayment, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000
         * @summary Get Crypto Loans Income History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [type] All types will be returned by default.   * &#x60;borrowIn&#x60;   * &#x60;collateralSpent&#x60;   * &#x60;repayAmount&#x60;   * &#x60;collateralReturn&#x60; - Collateral return after repayment   * &#x60;addCollateral&#x60;   * &#x60;removeCollateral&#x60;   * &#x60;collateralReturnAfterLiquidation&#x60;
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 20, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanIncomeGet(timestamp: number, signature: string, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200202>>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanIncomeGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200210>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan LTV Adjustment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanLtvAdjustmentHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200209>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanLtvAdjustmentHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 300
         * @summary Get Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1; default:1, max:1000
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200205>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanOngoingOrdersGet(timestamp, signature, orderId, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000
         * @summary Check Collateral Repay Rate (USER_DATA)
         * @param {string} loanCoin Coin loaned
         * @param {string} collateralCoin Coin used as collateral
         * @param {number} repayAmount repay amount of loanCoin
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayCollateralRateGet(loanCoin: string, collateralCoin: string, repayAmount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200212>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanRepayCollateralRateGet(loanCoin, collateralCoin, repayAmount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
         * @summary Get Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order ID
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] default 10, max 100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200207>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanRepayHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(UID): 6000
         * @summary Crypto Loan Repay (TRADE)
         * @param {number} orderId Order ID
         * @param {number} amount Repayment Amount
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [type] Default: 1. 1 for &#x27;repay with borrowed coin&#x27;; 2 for &#x27;repay with collateral&#x27;.
         * @param {boolean} [collateralReturn] Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanRepayPost(orderId: number, amount: number, timestamp: number, signature: string, type?: number, collateralReturn?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200206>> {
            return CryptoLoansApiFp(configuration).sapiV1LoanRepayPost(orderId, amount, timestamp, signature, type, collateralReturn, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * CryptoLoansApi - object-oriented interface
 * @export
 * @class CryptoLoansApi
 * @extends {BaseAPI}
 */
export class CryptoLoansApi extends BaseAPI {
    /**
     * Weight(UID): 6000
     * @summary Crypto Loan Adjust LTV (TRADE)
     * @param {number} orderId Order ID
     * @param {number} amount Amount
     * @param {string} direction &#x27;ADDITIONAL&#x27;, &#x27;REDUCED&#x27;
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanAdjustLtvPost(orderId: number, amount: number, direction: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200208>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanAdjustLtvPost(orderId, amount, direction, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - If startTime and endTime are not sent, the recent 90-day data will be returned. - The max interval between startTime and endTime is 180 days.  Weight(IP): 400
     * @summary Get Crypto Loans Borrow History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] default 10, max 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanBorrowHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200204>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanBorrowHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(UID): 6000
     * @summary Crypto Loan Borrow (TRADE)
     * @param {string} loanCoin Coin loaned
     * @param {string} collateralCoin Coin used as collateral
     * @param {number} loanTerm 7/14/30/90/180 days
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [loanAmount] Loan amount
     * @param {number} [collateralAmount] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanBorrowPost(loanCoin: string, collateralCoin: string, loanTerm: number, timestamp: number, signature: string, loanAmount?: number, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200203>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanBorrowPost(loanCoin, collateralCoin, loanTerm, timestamp, signature, loanAmount, collateralAmount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get LTV information and collateral limit of collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
     * @summary Get Collateral Assets Data (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [vipLevel] Defaults to user&#x27;s vip level
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200211>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanCollateralDataGet(timestamp, signature, collateralCoin, vipLevel, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Customize margin call for ongoing orders only.  Weight(UID): 6000
     * @summary Crypto Loan Customize Margin Call (TRADE)
     * @param {number} marginCall 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Mandatory when collateralCoin is empty. Send either orderId or collateralCoin, if both parameters are sent, take orderId only.
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanCustomizeMarginCallPost(marginCall: number, timestamp: number, signature: string, orderId?: number, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200213>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanCustomizeMarginCallPost(marginCall, timestamp, signature, orderId, collateralCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(UID): 6000
     * @summary Adjust LTV - Flexible Loan Adjust LTV (TRADE)
     * @param {number} adjustmentAmount 
     * @param {string} direction 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount: number, direction: string, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200219>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleAdjustLtvPost(adjustmentAmount, direction, timestamp, signature, loanCoin, collateralCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(IP): 400
     * @summary Borrow - Get Flexible Loan Borrow History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleBorrowHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200216>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleBorrowHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(UID): 6000
     * @summary Borrow - Flexible Loan Borrow (TRADE)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [loanAmount] Loan amount
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [collateralAmount] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleBorrowPost(timestamp: number, signature: string, loanCoin?: string, loanAmount?: number, collateralCoin?: string, collateralAmount?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200214>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleBorrowPost(timestamp, signature, loanCoin, loanAmount, collateralCoin, collateralAmount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get LTV information and collateral limit of flexible loan's collateral assets. The collateral limit is shown in USD value.  Weight(IP): 400
     * @summary Get Flexible Loan Collateral Assets Data (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200222>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get interest rate and borrow limit of flexible loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
     * @summary Get Flexible Loan Assets Data (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200221>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleLoanableDataGet(timestamp, signature, loanCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(IP): 400
     * @summary Adjust LTV - Get Flexible Loan LTV Adjustment History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200220>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleLtvAdjustmentHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(IP): 300
     * @summary Borrow - Get Flexible Loan Ongoing Orders (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleOngoingOrdersGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200215>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleOngoingOrdersGet(timestamp, signature, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(IP): 400
     * @summary Repay - Get Flexible Loan Repayment History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleRepayHistoryGet(timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200218>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleRepayHistoryGet(timestamp, signature, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     *  Weight(IP): 6000
     * @summary Repay - Flexible Loan Repay (TRADE)
     * @param {number} repayAmount repay amount of loanCoin
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {boolean} [collateralReturn] 
     * @param {boolean} [fullRepayment] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanFlexibleRepayPost(repayAmount: number, timestamp: number, signature: string, loanCoin?: string, collateralCoin?: string, collateralReturn?: boolean, fullRepayment?: boolean, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200217>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanFlexibleRepayPost(repayAmount, timestamp, signature, loanCoin, collateralCoin, collateralReturn, fullRepayment, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - If startTime and endTime are not sent, the recent 7-day data will be returned. - The max interval between startTime and endTime is 30 days.  Weight(UID): 6000
     * @summary Get Crypto Loans Income History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {string} [type] All types will be returned by default.   * &#x60;borrowIn&#x60;   * &#x60;collateralSpent&#x60;   * &#x60;repayAmount&#x60;   * &#x60;collateralReturn&#x60; - Collateral return after repayment   * &#x60;addCollateral&#x60;   * &#x60;removeCollateral&#x60;   * &#x60;collateralReturnAfterLiquidation&#x60;
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] default 20, max 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanIncomeGet(timestamp: number, signature: string, asset?: string, type?: string, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200202>>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanIncomeGet(timestamp, signature, asset, type, startTime, endTime, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
     * @summary Get Loanable Assets Data (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [vipLevel] Defaults to user&#x27;s vip level
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200210>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
     * @summary Get Loan LTV Adjustment History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order ID
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] default 10, max 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanLtvAdjustmentHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200209>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanLtvAdjustmentHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 300
     * @summary Get Loan Ongoing Orders (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] orderId in POST /sapi/v1/loan/borrow
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [current] Current querying page. Start from 1; default:1, max:1000
     * @param {number} [limit] default 10, max 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200205>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanOngoingOrdersGet(timestamp, signature, orderId, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get the the rate of collateral coin / loan coin when using collateral repay, the rate will be valid within 8 second.  Weight(IP): 6000
     * @summary Check Collateral Repay Rate (USER_DATA)
     * @param {string} loanCoin Coin loaned
     * @param {string} collateralCoin Coin used as collateral
     * @param {number} repayAmount repay amount of loanCoin
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanRepayCollateralRateGet(loanCoin: string, collateralCoin: string, repayAmount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200212>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanRepayCollateralRateGet(loanCoin, collateralCoin, repayAmount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * If startTime and endTime are not sent, the recent 90-day data will be returned. The max interval between startTime and endTime is 180 days.  Weight(IP): 400
     * @summary Get Loan Repayment History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order ID
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] default 10, max 100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, collateralCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200207>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanRepayHistoryGet(timestamp, signature, orderId, loanCoin, collateralCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(UID): 6000
     * @summary Crypto Loan Repay (TRADE)
     * @param {number} orderId Order ID
     * @param {number} amount Repayment Amount
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [type] Default: 1. 1 for &#x27;repay with borrowed coin&#x27;; 2 for &#x27;repay with collateral&#x27;.
     * @param {boolean} [collateralReturn] Default: TRUE. TRUE: Return extra collateral to spot account; FALSE: Keep extra collateral in the order.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof CryptoLoansApi
     */
    public async sapiV1LoanRepayPost(orderId: number, amount: number, timestamp: number, signature: string, type?: number, collateralReturn?: boolean, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200206>> {
        return CryptoLoansApiFp(this.configuration).sapiV1LoanRepayPost(orderId, amount, timestamp, signature, type, collateralReturn, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
