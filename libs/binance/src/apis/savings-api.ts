/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200128 } from '../models';
import { InlineResponse200129 } from '../models';
import { InlineResponse200130 } from '../models';
import { InlineResponse200131 } from '../models';
/**
 * SavingsApi - axios parameter creator
 * @export
 */
export const SavingsApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Purchase Fixed/Activity Project (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingCustomizedFixedPurchasePost: async (projectId: string, lot: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling sapiV1LendingCustomizedFixedPurchasePost.');
            }
            // verify required parameter 'lot' is not null or undefined
            if (lot === null || lot === undefined) {
                throw new RequiredError('lot','Required parameter lot was null or undefined when calling sapiV1LendingCustomizedFixedPurchasePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingCustomizedFixedPurchasePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingCustomizedFixedPurchasePost.');
            }
            const localVarPath = `/sapi/v1/lending/customizedFixed/purchase`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (lot !== undefined) {
                localVarQueryParameter['lot'] = lot;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - PositionId is mandatory parameter for fixed position.  Weight(IP): 1
         * @summary Change Fixed/Activity Position to Daily Position (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingPositionChangedPost: async (projectId: string, lot: string, timestamp: number, signature: string, positionId?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling sapiV1LendingPositionChangedPost.');
            }
            // verify required parameter 'lot' is not null or undefined
            if (lot === null || lot === undefined) {
                throw new RequiredError('lot','Required parameter lot was null or undefined when calling sapiV1LendingPositionChangedPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingPositionChangedPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingPositionChangedPost.');
            }
            const localVarPath = `/sapi/v1/lending/positionChanged`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (lot !== undefined) {
                localVarQueryParameter['lot'] = lot;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project List(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {boolean} [isSortAsc] default \&quot;true\&quot;
         * @param {string} [sortBy] Default &#x60;START_TIME&#x60;
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingProjectListGet: async (type: string, timestamp: number, signature: string, asset?: string, status?: string, isSortAsc?: boolean, sortBy?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling sapiV1LendingProjectListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingProjectListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingProjectListGet.');
            }
            const localVarPath = `/sapi/v1/lending/project/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (isSortAsc !== undefined) {
                localVarQueryParameter['isSortAsc'] = isSortAsc;
            }

            if (sortBy !== undefined) {
                localVarQueryParameter['sortBy'] = sortBy;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project Position (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [projectId] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LendingProjectPositionListGet: async (asset: string, timestamp: number, signature: string, projectId?: string, status?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1LendingProjectPositionListGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LendingProjectPositionListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LendingProjectPositionListGet.');
            }
            const localVarPath = `/sapi/v1/lending/project/position/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SavingsApi - functional programming interface
 * @export
 */
export const SavingsApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Purchase Fixed/Activity Project (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingCustomizedFixedPurchasePost(projectId: string, lot: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200129>>> {
            const localVarAxiosArgs = await SavingsApiAxiosParamCreator(configuration).sapiV1LendingCustomizedFixedPurchasePost(projectId, lot, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - PositionId is mandatory parameter for fixed position.  Weight(IP): 1
         * @summary Change Fixed/Activity Position to Daily Position (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingPositionChangedPost(projectId: string, lot: string, timestamp: number, signature: string, positionId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200131>>> {
            const localVarAxiosArgs = await SavingsApiAxiosParamCreator(configuration).sapiV1LendingPositionChangedPost(projectId, lot, timestamp, signature, positionId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project List(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {boolean} [isSortAsc] default \&quot;true\&quot;
         * @param {string} [sortBy] Default &#x60;START_TIME&#x60;
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingProjectListGet(type: string, timestamp: number, signature: string, asset?: string, status?: string, isSortAsc?: boolean, sortBy?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200128>>>> {
            const localVarAxiosArgs = await SavingsApiAxiosParamCreator(configuration).sapiV1LendingProjectListGet(type, timestamp, signature, asset, status, isSortAsc, sortBy, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project Position (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [projectId] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingProjectPositionListGet(asset: string, timestamp: number, signature: string, projectId?: string, status?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200130>>>> {
            const localVarAxiosArgs = await SavingsApiAxiosParamCreator(configuration).sapiV1LendingProjectPositionListGet(asset, timestamp, signature, projectId, status, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SavingsApi - factory interface
 * @export
 */
export const SavingsApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Weight(IP): 1
         * @summary Purchase Fixed/Activity Project (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingCustomizedFixedPurchasePost(projectId: string, lot: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200129>> {
            return SavingsApiFp(configuration).sapiV1LendingCustomizedFixedPurchasePost(projectId, lot, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - PositionId is mandatory parameter for fixed position.  Weight(IP): 1
         * @summary Change Fixed/Activity Position to Daily Position (USER_DATA)
         * @param {string} projectId 
         * @param {string} lot 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingPositionChangedPost(projectId: string, lot: string, timestamp: number, signature: string, positionId?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200131>> {
            return SavingsApiFp(configuration).sapiV1LendingPositionChangedPost(projectId, lot, timestamp, signature, positionId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project List(USER_DATA)
         * @param {string} type 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {boolean} [isSortAsc] default \&quot;true\&quot;
         * @param {string} [sortBy] Default &#x60;START_TIME&#x60;
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingProjectListGet(type: string, timestamp: number, signature: string, asset?: string, status?: string, isSortAsc?: boolean, sortBy?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200128>>> {
            return SavingsApiFp(configuration).sapiV1LendingProjectListGet(type, timestamp, signature, asset, status, isSortAsc, sortBy, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Get Fixed/Activity Project Position (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [projectId] 
         * @param {string} [status] Default &#x60;ALL&#x60;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LendingProjectPositionListGet(asset: string, timestamp: number, signature: string, projectId?: string, status?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200130>>> {
            return SavingsApiFp(configuration).sapiV1LendingProjectPositionListGet(asset, timestamp, signature, projectId, status, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SavingsApi - object-oriented interface
 * @export
 * @class SavingsApi
 * @extends {BaseAPI}
 */
export class SavingsApi extends BaseAPI {
    /**
     * Weight(IP): 1
     * @summary Purchase Fixed/Activity Project (USER_DATA)
     * @param {string} projectId 
     * @param {string} lot 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsApi
     */
    public async sapiV1LendingCustomizedFixedPurchasePost(projectId: string, lot: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200129>> {
        return SavingsApiFp(this.configuration).sapiV1LendingCustomizedFixedPurchasePost(projectId, lot, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - PositionId is mandatory parameter for fixed position.  Weight(IP): 1
     * @summary Change Fixed/Activity Position to Daily Position (USER_DATA)
     * @param {string} projectId 
     * @param {string} lot 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionId] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsApi
     */
    public async sapiV1LendingPositionChangedPost(projectId: string, lot: string, timestamp: number, signature: string, positionId?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200131>> {
        return SavingsApiFp(this.configuration).sapiV1LendingPositionChangedPost(projectId, lot, timestamp, signature, positionId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Get Fixed/Activity Project List(USER_DATA)
     * @param {string} type 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {string} [status] Default &#x60;ALL&#x60;
     * @param {boolean} [isSortAsc] default \&quot;true\&quot;
     * @param {string} [sortBy] Default &#x60;START_TIME&#x60;
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsApi
     */
    public async sapiV1LendingProjectListGet(type: string, timestamp: number, signature: string, asset?: string, status?: string, isSortAsc?: boolean, sortBy?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200128>>> {
        return SavingsApiFp(this.configuration).sapiV1LendingProjectListGet(type, timestamp, signature, asset, status, isSortAsc, sortBy, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Get Fixed/Activity Project Position (USER_DATA)
     * @param {string} asset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [projectId] 
     * @param {string} [status] Default &#x60;ALL&#x60;
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SavingsApi
     */
    public async sapiV1LendingProjectPositionListGet(asset: string, timestamp: number, signature: string, projectId?: string, status?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200130>>> {
        return SavingsApiFp(this.configuration).sapiV1LendingProjectPositionListGet(asset, timestamp, signature, projectId, status, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
