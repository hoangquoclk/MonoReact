/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200172 } from '../models';
import { InlineResponse200173 } from '../models';
import { InlineResponse200174 } from '../models';
import { InlineResponse200175 } from '../models';
import { InlineResponse200176 } from '../models';
import { InlineResponse200177 } from '../models';
/**
 * BLVTApi - axios parameter creator
 * @export
 */
export const BLVTApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Redeem BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtRedeemPost: async (tokenName: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenName' is not null or undefined
            if (tokenName === null || tokenName === undefined) {
                throw new RequiredError('tokenName','Required parameter tokenName was null or undefined when calling sapiV1BlvtRedeemPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1BlvtRedeemPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1BlvtRedeemPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1BlvtRedeemPost.');
            }
            const localVarPath = `/sapi/v1/blvt/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 1000, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtRedeemRecordGet: async (timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1BlvtRedeemRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1BlvtRedeemRecordGet.');
            }
            const localVarPath = `/sapi/v1/blvt/redeem/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary Subscribe BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} cost Spot balance
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtSubscribePost: async (tokenName: string, cost: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'tokenName' is not null or undefined
            if (tokenName === null || tokenName === undefined) {
                throw new RequiredError('tokenName','Required parameter tokenName was null or undefined when calling sapiV1BlvtSubscribePost.');
            }
            // verify required parameter 'cost' is not null or undefined
            if (cost === null || cost === undefined) {
                throw new RequiredError('cost','Required parameter cost was null or undefined when calling sapiV1BlvtSubscribePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1BlvtSubscribePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1BlvtSubscribePost.');
            }
            const localVarPath = `/sapi/v1/blvt/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            if (cost !== undefined) {
                localVarQueryParameter['cost'] = cost;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Query Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtSubscribeRecordGet: async (timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1BlvtSubscribeRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1BlvtSubscribeRecordGet.');
            }
            const localVarPath = `/sapi/v1/blvt/subscribe/record`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            if (id !== undefined) {
                localVarQueryParameter['id'] = id;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary BLVT Info (MARKET_DATA)
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtTokenInfoGet: async (tokenName?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/blvt/tokenInfo`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1
         * @summary BLVT User Limit Info (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1BlvtUserLimitGet: async (timestamp: number, signature: string, tokenName?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1BlvtUserLimitGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1BlvtUserLimitGet.');
            }
            const localVarPath = `/sapi/v1/blvt/userLimit`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (tokenName !== undefined) {
                localVarQueryParameter['tokenName'] = tokenName;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * BLVTApi - functional programming interface
 * @export
 */
export const BLVTApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 1
         * @summary Redeem BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtRedeemPost(tokenName: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200175>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtRedeemPost(tokenName, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 1000, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtRedeemRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200176>>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtRedeemRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary Subscribe BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} cost Spot balance
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtSubscribePost(tokenName: string, cost: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200173>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtSubscribePost(tokenName, cost, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Query Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtSubscribeRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200174>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtSubscribeRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary BLVT Info (MARKET_DATA)
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtTokenInfoGet(tokenName?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200172>>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtTokenInfoGet(tokenName, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1
         * @summary BLVT User Limit Info (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtUserLimitGet(timestamp: number, signature: string, tokenName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200177>>>> {
            const localVarAxiosArgs = await BLVTApiAxiosParamCreator(configuration).sapiV1BlvtUserLimitGet(timestamp, signature, tokenName, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * BLVTApi - factory interface
 * @export
 */
export const BLVTApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Weight(IP): 1
         * @summary Redeem BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtRedeemPost(tokenName: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200175>> {
            return BLVTApiFp(configuration).sapiV1BlvtRedeemPost(tokenName, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] default 1000, max 1000
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtRedeemRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200176>>> {
            return BLVTApiFp(configuration).sapiV1BlvtRedeemRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary Subscribe BLVT (USER_DATA)
         * @param {string} tokenName BTCDOWN, BTCUP
         * @param {number} cost Spot balance
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtSubscribePost(tokenName: string, cost: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200173>> {
            return BLVTApiFp(configuration).sapiV1BlvtSubscribePost(tokenName, cost, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * - Only the data of the latest 90 days is available  Weight(IP): 1
         * @summary Query Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [id] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtSubscribeRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200174>> {
            return BLVTApiFp(configuration).sapiV1BlvtSubscribeRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary BLVT Info (MARKET_DATA)
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtTokenInfoGet(tokenName?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200172>>> {
            return BLVTApiFp(configuration).sapiV1BlvtTokenInfoGet(tokenName, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1
         * @summary BLVT User Limit Info (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [tokenName] BTCDOWN, BTCUP
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1BlvtUserLimitGet(timestamp: number, signature: string, tokenName?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200177>>> {
            return BLVTApiFp(configuration).sapiV1BlvtUserLimitGet(timestamp, signature, tokenName, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * BLVTApi - object-oriented interface
 * @export
 * @class BLVTApi
 * @extends {BaseAPI}
 */
export class BLVTApi extends BaseAPI {
    /**
     * Weight(IP): 1
     * @summary Redeem BLVT (USER_DATA)
     * @param {string} tokenName BTCDOWN, BTCUP
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtRedeemPost(tokenName: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200175>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtRedeemPost(tokenName, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - Only the data of the latest 90 days is available  Weight(IP): 1
     * @summary Redemption Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [tokenName] BTCDOWN, BTCUP
     * @param {number} [id] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] default 1000, max 1000
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtRedeemRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200176>>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtRedeemRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary Subscribe BLVT (USER_DATA)
     * @param {string} tokenName BTCDOWN, BTCUP
     * @param {number} cost Spot balance
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtSubscribePost(tokenName: string, cost: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200173>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtSubscribePost(tokenName, cost, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * - Only the data of the latest 90 days is available  Weight(IP): 1
     * @summary Query Subscription Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [tokenName] BTCDOWN, BTCUP
     * @param {number} [id] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtSubscribeRecordGet(timestamp: number, signature: string, tokenName?: string, id?: number, startTime?: number, endTime?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200174>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtSubscribeRecordGet(timestamp, signature, tokenName, id, startTime, endTime, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary BLVT Info (MARKET_DATA)
     * @param {string} [tokenName] BTCDOWN, BTCUP
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtTokenInfoGet(tokenName?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200172>>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtTokenInfoGet(tokenName, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1
     * @summary BLVT User Limit Info (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [tokenName] BTCDOWN, BTCUP
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof BLVTApi
     */
    public async sapiV1BlvtUserLimitGet(timestamp: number, signature: string, tokenName?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200177>>> {
        return BLVTApiFp(this.configuration).sapiV1BlvtUserLimitGet(timestamp, signature, tokenName, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
