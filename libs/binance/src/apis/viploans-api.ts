/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200192 } from '../models';
import { InlineResponse200193 } from '../models';
import { InlineResponse200194 } from '../models';
import { InlineResponse200195 } from '../models';
import { InlineResponse200196 } from '../models';
import { InlineResponse200197 } from '../models';
import { InlineResponse200198 } from '../models';
import { InlineResponse200199 } from '../models';
import { InlineResponse200200 } from '../models';
import { InlineResponse200201 } from '../models';
/**
 * VIPLoansApi - axios parameter creator
 * @export
 */
export const VIPLoansApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Borrow
         * @param {number} loanAccountId 
         * @param {number} loanAmount 
         * @param {string} collateralAccountId 
         * @param {string} collateralCoin 
         * @param {string} isFlexibleRate 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipBorrowPost: async (loanAccountId: number, loanAmount: number, collateralAccountId: string, collateralCoin: string, isFlexibleRate: string, timestamp: number, signature: string, loanCoin?: string, loanTerm?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'loanAccountId' is not null or undefined
            if (loanAccountId === null || loanAccountId === undefined) {
                throw new RequiredError('loanAccountId','Required parameter loanAccountId was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'loanAmount' is not null or undefined
            if (loanAmount === null || loanAmount === undefined) {
                throw new RequiredError('loanAmount','Required parameter loanAmount was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'collateralAccountId' is not null or undefined
            if (collateralAccountId === null || collateralAccountId === undefined) {
                throw new RequiredError('collateralAccountId','Required parameter collateralAccountId was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'collateralCoin' is not null or undefined
            if (collateralCoin === null || collateralCoin === undefined) {
                throw new RequiredError('collateralCoin','Required parameter collateralCoin was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'isFlexibleRate' is not null or undefined
            if (isFlexibleRate === null || isFlexibleRate === undefined) {
                throw new RequiredError('isFlexibleRate','Required parameter isFlexibleRate was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipBorrowPost.');
            }
            const localVarPath = `/sapi/v1/loan/vip/borrow`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanAccountId !== undefined) {
                localVarQueryParameter['loanAccountId'] = loanAccountId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (loanAmount !== undefined) {
                localVarQueryParameter['loanAmount'] = loanAmount;
            }

            if (collateralAccountId !== undefined) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (isFlexibleRate !== undefined) {
                localVarQueryParameter['isFlexibleRate'] = isFlexibleRate;
            }

            if (loanTerm !== undefined) {
                localVarQueryParameter['loanTerm'] = loanTerm;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 6000
         * @summary Check Locked Value of VIP Collateral Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipCollateralAccountGet: async (timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipCollateralAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipCollateralAccountGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/collateral/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (collateralAccountId !== undefined) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get collateral asset data.  Weight(IP): 400
         * @summary Get Collateral Asset Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipCollateralDataGet: async (timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipCollateralDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipCollateralDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/collateral/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipLoanableDataGet: async (timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipLoanableDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipLoanableDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/loanable/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (vipLevel !== undefined) {
                localVarQueryParameter['vipLevel'] = vipLevel;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipOngoingOrdersGet: async (timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipOngoingOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipOngoingOrdersGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/ongoing/orders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (collateralAccountId !== undefined) {
                localVarQueryParameter['collateralAccountId'] = collateralAccountId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (collateralCoin !== undefined) {
                localVarQueryParameter['collateralCoin'] = collateralCoin;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Renew
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipRenewPost: async (timestamp: number, signature: string, orderId?: number, loanTerm?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipRenewPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipRenewPost.');
            }
            const localVarPath = `/sapi/v1/loan/vip/renew`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanTerm !== undefined) {
                localVarQueryParameter['loanTerm'] = loanTerm;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipRepayHistoryGet: async (timestamp: number, signature: string, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipRepayHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipRepayHistoryGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/repay/history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Repay (TRADE)
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipRepayPost: async (amount: number, timestamp: number, signature: string, orderId?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1LoanVipRepayPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipRepayPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipRepayPost.');
            }
            const localVarPath = `/sapi/v1/loan/vip/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (orderId !== undefined) {
                localVarQueryParameter['orderId'] = orderId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get Application Status  Weight(UID): 400
         * @summary Query Application Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipRequestDataGet: async (timestamp: number, signature: string, current?: number, limit?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipRequestDataGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipRequestDataGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/request/data`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (limit !== undefined) {
                localVarQueryParameter['limit'] = limit;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get borrow interest rate.  Weight(UID): 400
         * @summary Get Borrow Interest Rate (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Max 10 assets, Multiple split by \&quot;,\&quot;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1LoanVipRequestInterestRateGet: async (timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1LoanVipRequestInterestRateGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1LoanVipRequestInterestRateGet.');
            }
            const localVarPath = `/sapi/v1/loan/vip/request/interestRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (loanCoin !== undefined) {
                localVarQueryParameter['loanCoin'] = loanCoin;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * VIPLoansApi - functional programming interface
 * @export
 */
export const VIPLoansApiFp = function(configuration?: Configuration) {
    return {
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Borrow
         * @param {number} loanAccountId 
         * @param {number} loanAmount 
         * @param {string} collateralAccountId 
         * @param {string} collateralCoin 
         * @param {string} isFlexibleRate 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipBorrowPost(loanAccountId: number, loanAmount: number, collateralAccountId: string, collateralCoin: string, isFlexibleRate: string, timestamp: number, signature: string, loanCoin?: string, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200196>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipBorrowPost(loanAccountId, loanAmount, collateralAccountId, collateralCoin, isFlexibleRate, timestamp, signature, loanCoin, loanTerm, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 6000
         * @summary Check Locked Value of VIP Collateral Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipCollateralAccountGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200195>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipCollateralAccountGet(timestamp, signature, orderId, collateralAccountId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get collateral asset data.  Weight(IP): 400
         * @summary Get Collateral Asset Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200198>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200197>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200192>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipOngoingOrdersGet(timestamp, signature, orderId, collateralAccountId, loanCoin, collateralCoin, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Renew
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRenewPost(timestamp: number, signature: string, orderId?: number, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200201>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipRenewPost(timestamp, signature, orderId, loanTerm, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200194>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipRepayHistoryGet(timestamp, signature, orderId, loanCoin, startTime, endTime, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Repay (TRADE)
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRepayPost(amount: number, timestamp: number, signature: string, orderId?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200193>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipRepayPost(amount, timestamp, signature, orderId, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get Application Status  Weight(UID): 400
         * @summary Query Application Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRequestDataGet(timestamp: number, signature: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200199>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipRequestDataGet(timestamp, signature, current, limit, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get borrow interest rate.  Weight(UID): 400
         * @summary Get Borrow Interest Rate (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Max 10 assets, Multiple split by \&quot;,\&quot;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRequestInterestRateGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200200>>>> {
            const localVarAxiosArgs = await VIPLoansApiAxiosParamCreator(configuration).sapiV1LoanVipRequestInterestRateGet(timestamp, signature, loanCoin, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * VIPLoansApi - factory interface
 * @export
 */
export const VIPLoansApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Borrow
         * @param {number} loanAccountId 
         * @param {number} loanAmount 
         * @param {string} collateralAccountId 
         * @param {string} collateralCoin 
         * @param {string} isFlexibleRate 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipBorrowPost(loanAccountId: number, loanAmount: number, collateralAccountId: string, collateralCoin: string, isFlexibleRate: string, timestamp: number, signature: string, loanCoin?: string, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200196>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipBorrowPost(loanAccountId, loanAmount, collateralAccountId, collateralCoin, isFlexibleRate, timestamp, signature, loanCoin, loanTerm, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 6000
         * @summary Check Locked Value of VIP Collateral Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipCollateralAccountGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200195>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipCollateralAccountGet(timestamp, signature, orderId, collateralAccountId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get collateral asset data.  Weight(IP): 400
         * @summary Get Collateral Asset Data (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200198>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
         * @summary Get Loanable Assets Data
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [vipLevel] Defaults to user&#x27;s vip level
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200197>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Ongoing Orders (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [collateralAccountId] 
         * @param {string} [loanCoin] Coin loaned
         * @param {string} [collateralCoin] Coin used as collateral
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200192>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipOngoingOrdersGet(timestamp, signature, orderId, collateralAccountId, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Renew
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [loanTerm] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRenewPost(timestamp: number, signature: string, orderId?: number, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200201>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipRenewPost(timestamp, signature, orderId, loanTerm, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.  Weight(IP): 400
         * @summary Get VIP Loan Repayment History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {string} [loanCoin] Coin loaned
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 10; max 100.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200194>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipRepayHistoryGet(timestamp, signature, orderId, loanCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * VIP loan is available for VIP users only.  Weight(UID): 6000
         * @summary VIP Loan Repay (TRADE)
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [orderId] Order id
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRepayPost(amount: number, timestamp: number, signature: string, orderId?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200193>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipRepayPost(amount, timestamp, signature, orderId, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get Application Status  Weight(UID): 400
         * @summary Query Application Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [limit] Default 500; max 1000.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRequestDataGet(timestamp: number, signature: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200199>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipRequestDataGet(timestamp, signature, current, limit, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get borrow interest rate.  Weight(UID): 400
         * @summary Get Borrow Interest Rate (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [loanCoin] Max 10 assets, Multiple split by \&quot;,\&quot;
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1LoanVipRequestInterestRateGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200200>>> {
            return VIPLoansApiFp(configuration).sapiV1LoanVipRequestInterestRateGet(timestamp, signature, loanCoin, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * VIPLoansApi - object-oriented interface
 * @export
 * @class VIPLoansApi
 * @extends {BaseAPI}
 */
export class VIPLoansApi extends BaseAPI {
    /**
     * VIP loan is available for VIP users only.  Weight(UID): 6000
     * @summary VIP Loan Borrow
     * @param {number} loanAccountId 
     * @param {number} loanAmount 
     * @param {string} collateralAccountId 
     * @param {string} collateralCoin 
     * @param {string} isFlexibleRate 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [loanTerm] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipBorrowPost(loanAccountId: number, loanAmount: number, collateralAccountId: string, collateralCoin: string, isFlexibleRate: string, timestamp: number, signature: string, loanCoin?: string, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200196>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipBorrowPost(loanAccountId, loanAmount, collateralAccountId, collateralCoin, isFlexibleRate, timestamp, signature, loanCoin, loanTerm, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * VIP loan is available for VIP users only.  Weight(IP): 6000
     * @summary Check Locked Value of VIP Collateral Account (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order id
     * @param {number} [collateralAccountId] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipCollateralAccountGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200195>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipCollateralAccountGet(timestamp, signature, orderId, collateralAccountId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get collateral asset data.  Weight(IP): 400
     * @summary Get Collateral Asset Data (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipCollateralDataGet(timestamp: number, signature: string, collateralCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200198>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipCollateralDataGet(timestamp, signature, collateralCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get interest rate and borrow limit of loanable assets. The borrow limit is shown in USD value.  Weight(IP): 400
     * @summary Get Loanable Assets Data
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [vipLevel] Defaults to user&#x27;s vip level
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipLoanableDataGet(timestamp: number, signature: string, loanCoin?: string, vipLevel?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200197>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipLoanableDataGet(timestamp, signature, loanCoin, vipLevel, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * VIP loan is available for VIP users only.  Weight(IP): 400
     * @summary Get VIP Loan Ongoing Orders (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order id
     * @param {number} [collateralAccountId] 
     * @param {string} [loanCoin] Coin loaned
     * @param {string} [collateralCoin] Coin used as collateral
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 10; max 100.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipOngoingOrdersGet(timestamp: number, signature: string, orderId?: number, collateralAccountId?: number, loanCoin?: string, collateralCoin?: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200192>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipOngoingOrdersGet(timestamp, signature, orderId, collateralAccountId, loanCoin, collateralCoin, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * VIP loan is available for VIP users only.  Weight(UID): 6000
     * @summary VIP Loan Renew
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order id
     * @param {number} [loanTerm] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipRenewPost(timestamp: number, signature: string, orderId?: number, loanTerm?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200201>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipRenewPost(timestamp, signature, orderId, loanTerm, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * VIP loan is available for VIP users only.  Weight(IP): 400
     * @summary Get VIP Loan Repayment History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order id
     * @param {string} [loanCoin] Coin loaned
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 10; max 100.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipRepayHistoryGet(timestamp: number, signature: string, orderId?: number, loanCoin?: string, startTime?: number, endTime?: number, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200194>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipRepayHistoryGet(timestamp, signature, orderId, loanCoin, startTime, endTime, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * VIP loan is available for VIP users only.  Weight(UID): 6000
     * @summary VIP Loan Repay (TRADE)
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [orderId] Order id
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipRepayPost(amount: number, timestamp: number, signature: string, orderId?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200193>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipRepayPost(amount, timestamp, signature, orderId, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get Application Status  Weight(UID): 400
     * @summary Query Application Status (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [limit] Default 500; max 1000.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipRequestDataGet(timestamp: number, signature: string, current?: number, limit?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200199>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipRequestDataGet(timestamp, signature, current, limit, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get borrow interest rate.  Weight(UID): 400
     * @summary Get Borrow Interest Rate (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [loanCoin] Max 10 assets, Multiple split by \&quot;,\&quot;
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof VIPLoansApi
     */
    public async sapiV1LoanVipRequestInterestRateGet(timestamp: number, signature: string, loanCoin?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200200>>> {
        return VIPLoansApiFp(this.configuration).sapiV1LoanVipRequestInterestRateGet(timestamp, signature, loanCoin, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
