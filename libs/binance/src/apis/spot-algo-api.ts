/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200158 } from '../models';
import { InlineResponse200159 } from '../models';
import { InlineResponse200160 } from '../models';
import { InlineResponse200161 } from '../models';
import { InlineResponse200162 } from '../models';
/**
 * SpotAlgoApi - axios parameter creator
 * @export
 */
export const SpotAlgoApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get all historical SPOT TWAP orders  Weight(IP): 1
         * @summary Query Historical Algo Orders
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoSpotHistoricalOrdersGet: async (symbol: string, side: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling sapiV1AlgoSpotHistoricalOrdersGet.');
            }
            // verify required parameter 'side' is not null or undefined
            if (side === null || side === undefined) {
                throw new RequiredError('side','Required parameter side was null or undefined when calling sapiV1AlgoSpotHistoricalOrdersGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoSpotHistoricalOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoSpotHistoricalOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/spot/historicalOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Place a new spot TWAP order with Algo service.  Weight(UID): 3000
         * @summary Time-Weighted Average Price (Twap) New Order
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity 
         * @param {number} duration 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [clientAlgoId] 
         * @param {number} [limitPrice] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoSpotNewOrderTwapPost: async (symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, clientAlgoId?: string, limitPrice?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'symbol' is not null or undefined
            if (symbol === null || symbol === undefined) {
                throw new RequiredError('symbol','Required parameter symbol was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            // verify required parameter 'side' is not null or undefined
            if (side === null || side === undefined) {
                throw new RequiredError('side','Required parameter side was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            // verify required parameter 'quantity' is not null or undefined
            if (quantity === null || quantity === undefined) {
                throw new RequiredError('quantity','Required parameter quantity was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            // verify required parameter 'duration' is not null or undefined
            if (duration === null || duration === undefined) {
                throw new RequiredError('duration','Required parameter duration was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoSpotNewOrderTwapPost.');
            }
            const localVarPath = `/sapi/v1/algo/spot/newOrderTwap`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (symbol !== undefined) {
                localVarQueryParameter['symbol'] = symbol;
            }

            if (side !== undefined) {
                localVarQueryParameter['side'] = side;
            }

            if (quantity !== undefined) {
                localVarQueryParameter['quantity'] = quantity;
            }

            if (duration !== undefined) {
                localVarQueryParameter['duration'] = duration;
            }

            if (clientAlgoId !== undefined) {
                localVarQueryParameter['clientAlgoId'] = clientAlgoId;
            }

            if (limitPrice !== undefined) {
                localVarQueryParameter['limitPrice'] = limitPrice;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get all open SPOT TWAP orders  Weight(IP): 1
         * @summary Query Current Algo Open Orders
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoSpotOpenOrdersGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoSpotOpenOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoSpotOpenOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/spot/openOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Cancel an open TWAP order  Weight(IP): 1
         * @summary Cancel Algo Order
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoSpotOrderDelete: async (algoId: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            if (algoId === null || algoId === undefined) {
                throw new RequiredError('algoId','Required parameter algoId was null or undefined when calling sapiV1AlgoSpotOrderDelete.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoSpotOrderDelete.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoSpotOrderDelete.');
            }
            const localVarPath = `/sapi/v1/algo/spot/order`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get respective sub orders for a specified algoId  Weight(IP): 1
         * @summary Query Sub Orders
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1AlgoSpotSubOrdersGet: async (algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'algoId' is not null or undefined
            if (algoId === null || algoId === undefined) {
                throw new RequiredError('algoId','Required parameter algoId was null or undefined when calling sapiV1AlgoSpotSubOrdersGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1AlgoSpotSubOrdersGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1AlgoSpotSubOrdersGet.');
            }
            const localVarPath = `/sapi/v1/algo/spot/subOrders`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (algoId !== undefined) {
                localVarQueryParameter['algoId'] = algoId;
            }

            if (page !== undefined) {
                localVarQueryParameter['page'] = page;
            }

            if (pageSize !== undefined) {
                localVarQueryParameter['pageSize'] = pageSize;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SpotAlgoApi - functional programming interface
 * @export
 */
export const SpotAlgoApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get all historical SPOT TWAP orders  Weight(IP): 1
         * @summary Query Historical Algo Orders
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotHistoricalOrdersGet(symbol: string, side: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200161>>> {
            const localVarAxiosArgs = await SpotAlgoApiAxiosParamCreator(configuration).sapiV1AlgoSpotHistoricalOrdersGet(symbol, side, timestamp, signature, startTime, endTime, page, pageSize, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Place a new spot TWAP order with Algo service.  Weight(UID): 3000
         * @summary Time-Weighted Average Price (Twap) New Order
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity 
         * @param {number} duration 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [clientAlgoId] 
         * @param {number} [limitPrice] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, clientAlgoId?: string, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200158>>> {
            const localVarAxiosArgs = await SpotAlgoApiAxiosParamCreator(configuration).sapiV1AlgoSpotNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, clientAlgoId, limitPrice, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get all open SPOT TWAP orders  Weight(IP): 1
         * @summary Query Current Algo Open Orders
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200160>>> {
            const localVarAxiosArgs = await SpotAlgoApiAxiosParamCreator(configuration).sapiV1AlgoSpotOpenOrdersGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Cancel an open TWAP order  Weight(IP): 1
         * @summary Cancel Algo Order
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200159>>> {
            const localVarAxiosArgs = await SpotAlgoApiAxiosParamCreator(configuration).sapiV1AlgoSpotOrderDelete(algoId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get respective sub orders for a specified algoId  Weight(IP): 1
         * @summary Query Sub Orders
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200162>>> {
            const localVarAxiosArgs = await SpotAlgoApiAxiosParamCreator(configuration).sapiV1AlgoSpotSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SpotAlgoApi - factory interface
 * @export
 */
export const SpotAlgoApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get all historical SPOT TWAP orders  Weight(IP): 1
         * @summary Query Historical Algo Orders
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotHistoricalOrdersGet(symbol: string, side: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200161>> {
            return SpotAlgoApiFp(configuration).sapiV1AlgoSpotHistoricalOrdersGet(symbol, side, timestamp, signature, startTime, endTime, page, pageSize, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Place a new spot TWAP order with Algo service.  Weight(UID): 3000
         * @summary Time-Weighted Average Price (Twap) New Order
         * @param {string} symbol Trading symbol, e.g. BNBUSDT
         * @param {string} side 
         * @param {number} quantity 
         * @param {number} duration 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [clientAlgoId] 
         * @param {number} [limitPrice] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, clientAlgoId?: string, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200158>> {
            return SpotAlgoApiFp(configuration).sapiV1AlgoSpotNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, clientAlgoId, limitPrice, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get all open SPOT TWAP orders  Weight(IP): 1
         * @summary Query Current Algo Open Orders
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200160>> {
            return SpotAlgoApiFp(configuration).sapiV1AlgoSpotOpenOrdersGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Cancel an open TWAP order  Weight(IP): 1
         * @summary Cancel Algo Order
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200159>> {
            return SpotAlgoApiFp(configuration).sapiV1AlgoSpotOrderDelete(algoId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get respective sub orders for a specified algoId  Weight(IP): 1
         * @summary Query Sub Orders
         * @param {number} algoId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [page] Default 1
         * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1AlgoSpotSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200162>> {
            return SpotAlgoApiFp(configuration).sapiV1AlgoSpotSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SpotAlgoApi - object-oriented interface
 * @export
 * @class SpotAlgoApi
 * @extends {BaseAPI}
 */
export class SpotAlgoApi extends BaseAPI {
    /**
     * Get all historical SPOT TWAP orders  Weight(IP): 1
     * @summary Query Historical Algo Orders
     * @param {string} symbol Trading symbol, e.g. BNBUSDT
     * @param {string} side 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [page] Default 1
     * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public async sapiV1AlgoSpotHistoricalOrdersGet(symbol: string, side: string, timestamp: number, signature: string, startTime?: number, endTime?: number, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200161>> {
        return SpotAlgoApiFp(this.configuration).sapiV1AlgoSpotHistoricalOrdersGet(symbol, side, timestamp, signature, startTime, endTime, page, pageSize, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Place a new spot TWAP order with Algo service.  Weight(UID): 3000
     * @summary Time-Weighted Average Price (Twap) New Order
     * @param {string} symbol Trading symbol, e.g. BNBUSDT
     * @param {string} side 
     * @param {number} quantity 
     * @param {number} duration 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [clientAlgoId] 
     * @param {number} [limitPrice] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public async sapiV1AlgoSpotNewOrderTwapPost(symbol: string, side: string, quantity: number, duration: number, timestamp: number, signature: string, clientAlgoId?: string, limitPrice?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200158>> {
        return SpotAlgoApiFp(this.configuration).sapiV1AlgoSpotNewOrderTwapPost(symbol, side, quantity, duration, timestamp, signature, clientAlgoId, limitPrice, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get all open SPOT TWAP orders  Weight(IP): 1
     * @summary Query Current Algo Open Orders
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public async sapiV1AlgoSpotOpenOrdersGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200160>> {
        return SpotAlgoApiFp(this.configuration).sapiV1AlgoSpotOpenOrdersGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Cancel an open TWAP order  Weight(IP): 1
     * @summary Cancel Algo Order
     * @param {number} algoId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public async sapiV1AlgoSpotOrderDelete(algoId: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200159>> {
        return SpotAlgoApiFp(this.configuration).sapiV1AlgoSpotOrderDelete(algoId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get respective sub orders for a specified algoId  Weight(IP): 1
     * @summary Query Sub Orders
     * @param {number} algoId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [page] Default 1
     * @param {string} [pageSize] Number of pages, minimum 10, maximum 200
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SpotAlgoApi
     */
    public async sapiV1AlgoSpotSubOrdersGet(algoId: number, timestamp: number, signature: string, page?: number, pageSize?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200162>> {
        return SpotAlgoApiFp(this.configuration).sapiV1AlgoSpotSubOrdersGet(algoId, timestamp, signature, page, pageSize, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
