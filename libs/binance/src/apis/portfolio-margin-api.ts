/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200151 } from '../models';
import { InlineResponse200163 } from '../models';
import { InlineResponse200164 } from '../models';
import { InlineResponse200165 } from '../models';
import { InlineResponse200166 } from '../models';
import { InlineResponse200167 } from '../models';
import { InlineResponse200168 } from '../models';
import { InlineResponse200169 } from '../models';
import { InlineResponse200170 } from '../models';
import { InlineResponse200171 } from '../models';
/**
 * PortfolioMarginApi - axios parameter creator
 * @export
 */
export const PortfolioMarginApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Get the account info  'Weight(IP): 1'
         * @summary Portfolio Margin Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioAccountGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioAccountGet.');
            }
            const localVarPath = `/sapi/v1/portfolio/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers specific asset from Futures Account to Margin account  Weight(IP): 60
         * @summary Fund Collection by Asset (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioAssetCollectionPost: async (asset: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1PortfolioAssetCollectionPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioAssetCollectionPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioAssetCollectionPost.');
            }
            const localVarPath = `/sapi/v1/portfolio/asset-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Asset Index Price  Weight(IP): - 1 if send asset - 50 if not send asset
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioAssetIndexPriceGet: async (asset?: string, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/asset-index-price`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Transfers all assets from Futures Account to Margin account  Weight(IP): 1500
         * @summary Fund Auto-collection (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioAutoCollectionPost: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioAutoCollectionPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioAutoCollectionPost.');
            }
            const localVarPath = `/sapi/v1/portfolio/auto-collection`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account  Weight(IP): 1500
         * @summary BNB Transfer (USER_DATA)
         * @param {string} transferSide 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioBnbTransferPost: async (transferSide: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'transferSide' is not null or undefined
            if (transferSide === null || transferSide === undefined) {
                throw new RequiredError('transferSide','Required parameter transferSide was null or undefined when calling sapiV1PortfolioBnbTransferPost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1PortfolioBnbTransferPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioBnbTransferPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioBnbTransferPost.');
            }
            const localVarPath = `/sapi/v1/portfolio/bnb-transfer`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (transferSide !== undefined) {
                localVarQueryParameter['transferSide'] = transferSide;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Portfolio Margin Collateral Rate.  Weight(IP): 50
         * @summary Portfolio Margin Collateral Rate (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioCollateralRateGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/collateralRate`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query interest history of negative balance for portfolio margin.  Weight(IP): 50
         * @summary Query Classic Portfolio Margin Negative Balance Interest History (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioInterestHistoryGet: async (asset: string, timestamp: number, signature: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'asset' is not null or undefined
            if (asset === null || asset === undefined) {
                throw new RequiredError('asset','Required parameter asset was null or undefined when calling sapiV1PortfolioInterestHistoryGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioInterestHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioInterestHistoryGet.');
            }
            const localVarPath = `/sapi/v1/portfolio/interest-history`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 50
         * @summary Get Portfolio Margin Asset Leverage (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioMarginAssetLeverageGet: async (options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/portfolio/margin-asset-leverage`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Portfolio Margin Bankruptcy Loan Amount.  Weight(UID): 500
         * @summary Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioPmLoanGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioPmLoanGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioPmLoanGet.');
            }
            const localVarPath = `/sapi/v1/portfolio/pmLoan`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay futures Negative Balance  Weight(IP): 1500
         * @summary Repay futures Negative Balance (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioRepayFuturesNegativeBalancePost: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioRepayFuturesNegativeBalancePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioRepayFuturesNegativeBalancePost.');
            }
            const localVarPath = `/sapi/v1/portfolio/repay-futures-negative-balance`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Query Auto-repay-futures Status  Weight(IP): 30
         * @summary Get Auto-repay-futures Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioRepayFuturesSwitchGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioRepayFuturesSwitchGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioRepayFuturesSwitchGet.');
            }
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Change Auto-repay-futures Status  Weight(IP): 1500
         * @summary Change Auto-repay-futures Status (USER_DATA)
         * @param {boolean} autoRepay 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioRepayFuturesSwitchPost: async (autoRepay: boolean, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'autoRepay' is not null or undefined
            if (autoRepay === null || autoRepay === undefined) {
                throw new RequiredError('autoRepay','Required parameter autoRepay was null or undefined when calling sapiV1PortfolioRepayFuturesSwitchPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioRepayFuturesSwitchPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioRepayFuturesSwitchPost.');
            }
            const localVarPath = `/sapi/v1/portfolio/repay-futures-switch`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (autoRepay !== undefined) {
                localVarQueryParameter['autoRepay'] = autoRepay;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Repay Portfolio Margin Bankruptcy Loan.  Weight(UID): 3000
         * @summary Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [from] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1PortfolioRepayPost: async (timestamp: number, signature: string, from?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1PortfolioRepayPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1PortfolioRepayPost.');
            }
            const localVarPath = `/sapi/v1/portfolio/repay`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (from !== undefined) {
                localVarQueryParameter['from'] = from;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * PortfolioMarginApi - functional programming interface
 * @export
 */
export const PortfolioMarginApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Get the account info  'Weight(IP): 1'
         * @summary Portfolio Margin Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200163>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioAccountGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Transfers specific asset from Futures Account to Margin account  Weight(IP): 60
         * @summary Fund Collection by Asset (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAssetCollectionPost(asset: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200169>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioAssetCollectionPost(asset, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Portfolio Margin Asset Index Price  Weight(IP): - 1 if send asset - 50 if not send asset
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAssetIndexPriceGet(asset?: string, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200168>>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioAssetIndexPriceGet(asset, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Transfers all assets from Futures Account to Margin account  Weight(IP): 1500
         * @summary Fund Auto-collection (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAutoCollectionPost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200169>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioAutoCollectionPost(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account  Weight(IP): 1500
         * @summary BNB Transfer (USER_DATA)
         * @param {string} transferSide 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioBnbTransferPost(transferSide: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200151>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioBnbTransferPost(transferSide, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Portfolio Margin Collateral Rate.  Weight(IP): 50
         * @summary Portfolio Margin Collateral Rate (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioCollateralRateGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200164>>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioCollateralRateGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query interest history of negative balance for portfolio margin.  Weight(IP): 50
         * @summary Query Classic Portfolio Margin Negative Balance Interest History (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioInterestHistoryGet(asset: string, timestamp: number, signature: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200167>>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioInterestHistoryGet(asset, timestamp, signature, startTime, endTime, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 50
         * @summary Get Portfolio Margin Asset Leverage (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioMarginAssetLeverageGet(options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200171>>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioMarginAssetLeverageGet(options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Portfolio Margin Bankruptcy Loan Amount.  Weight(UID): 500
         * @summary Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioPmLoanGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200165>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioPmLoanGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Repay futures Negative Balance  Weight(IP): 1500
         * @summary Repay futures Negative Balance (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200169>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Query Auto-repay-futures Status  Weight(IP): 30
         * @summary Get Auto-repay-futures Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesSwitchGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200170>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioRepayFuturesSwitchGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Change Auto-repay-futures Status  Weight(IP): 1500
         * @summary Change Auto-repay-futures Status (USER_DATA)
         * @param {boolean} autoRepay 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesSwitchPost(autoRepay: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200169>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioRepayFuturesSwitchPost(autoRepay, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Repay Portfolio Margin Bankruptcy Loan.  Weight(UID): 3000
         * @summary Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [from] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayPost(timestamp: number, signature: string, from?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200166>>> {
            const localVarAxiosArgs = await PortfolioMarginApiAxiosParamCreator(configuration).sapiV1PortfolioRepayPost(timestamp, signature, from, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * PortfolioMarginApi - factory interface
 * @export
 */
export const PortfolioMarginApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Get the account info  'Weight(IP): 1'
         * @summary Portfolio Margin Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200163>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioAccountGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers specific asset from Futures Account to Margin account  Weight(IP): 60
         * @summary Fund Collection by Asset (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAssetCollectionPost(asset: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200169>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioAssetCollectionPost(asset, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Asset Index Price  Weight(IP): - 1 if send asset - 50 if not send asset
         * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
         * @param {string} [asset] 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAssetIndexPriceGet(asset?: string, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200168>>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioAssetIndexPriceGet(asset, options).then((request) => request(axios, basePath));
        },
        /**
         * Transfers all assets from Futures Account to Margin account  Weight(IP): 1500
         * @summary Fund Auto-collection (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioAutoCollectionPost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200169>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioAutoCollectionPost(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * BNB transfer can be between Margin Account and USDM Account  Weight(IP): 1500
         * @summary BNB Transfer (USER_DATA)
         * @param {string} transferSide 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioBnbTransferPost(transferSide: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200151>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioBnbTransferPost(transferSide, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Portfolio Margin Collateral Rate.  Weight(IP): 50
         * @summary Portfolio Margin Collateral Rate (MARKET_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioCollateralRateGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200164>>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioCollateralRateGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Query interest history of negative balance for portfolio margin.  Weight(IP): 50
         * @summary Query Classic Portfolio Margin Negative Balance Interest History (USER_DATA)
         * @param {string} asset 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioInterestHistoryGet(asset: string, timestamp: number, signature: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200167>>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioInterestHistoryGet(asset, timestamp, signature, startTime, endTime, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 50
         * @summary Get Portfolio Margin Asset Leverage (USER_DATA)
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioMarginAssetLeverageGet(options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200171>>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioMarginAssetLeverageGet(options).then((request) => request(axios, basePath));
        },
        /**
         * Query Portfolio Margin Bankruptcy Loan Amount.  Weight(UID): 500
         * @summary Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioPmLoanGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200165>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioPmLoanGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay futures Negative Balance  Weight(IP): 1500
         * @summary Repay futures Negative Balance (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200169>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Query Auto-repay-futures Status  Weight(IP): 30
         * @summary Get Auto-repay-futures Status (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesSwitchGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200170>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioRepayFuturesSwitchGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Change Auto-repay-futures Status  Weight(IP): 1500
         * @summary Change Auto-repay-futures Status (USER_DATA)
         * @param {boolean} autoRepay 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayFuturesSwitchPost(autoRepay: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200169>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioRepayFuturesSwitchPost(autoRepay, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Repay Portfolio Margin Bankruptcy Loan.  Weight(UID): 3000
         * @summary Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [from] 
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1PortfolioRepayPost(timestamp: number, signature: string, from?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200166>> {
            return PortfolioMarginApiFp(configuration).sapiV1PortfolioRepayPost(timestamp, signature, from, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * PortfolioMarginApi - object-oriented interface
 * @export
 * @class PortfolioMarginApi
 * @extends {BaseAPI}
 */
export class PortfolioMarginApi extends BaseAPI {
    /**
     * Get the account info  'Weight(IP): 1'
     * @summary Portfolio Margin Account (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200163>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioAccountGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Transfers specific asset from Futures Account to Margin account  Weight(IP): 60
     * @summary Fund Collection by Asset (USER_DATA)
     * @param {string} asset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioAssetCollectionPost(asset: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200169>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioAssetCollectionPost(asset, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Portfolio Margin Asset Index Price  Weight(IP): - 1 if send asset - 50 if not send asset
     * @summary Query Portfolio Margin Asset Index Price (MARKET_DATA)
     * @param {string} [asset] 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioAssetIndexPriceGet(asset?: string, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200168>>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioAssetIndexPriceGet(asset, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Transfers all assets from Futures Account to Margin account  Weight(IP): 1500
     * @summary Fund Auto-collection (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioAutoCollectionPost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200169>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioAutoCollectionPost(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * BNB transfer can be between Margin Account and USDM Account  Weight(IP): 1500
     * @summary BNB Transfer (USER_DATA)
     * @param {string} transferSide 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioBnbTransferPost(transferSide: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200151>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioBnbTransferPost(transferSide, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Portfolio Margin Collateral Rate.  Weight(IP): 50
     * @summary Portfolio Margin Collateral Rate (MARKET_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioCollateralRateGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200164>>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioCollateralRateGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query interest history of negative balance for portfolio margin.  Weight(IP): 50
     * @summary Query Classic Portfolio Margin Negative Balance Interest History (USER_DATA)
     * @param {string} asset 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioInterestHistoryGet(asset: string, timestamp: number, signature: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200167>>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioInterestHistoryGet(asset, timestamp, signature, startTime, endTime, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 50
     * @summary Get Portfolio Margin Asset Leverage (USER_DATA)
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioMarginAssetLeverageGet(options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200171>>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioMarginAssetLeverageGet(options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Portfolio Margin Bankruptcy Loan Amount.  Weight(UID): 500
     * @summary Portfolio Margin Bankruptcy Loan Amount (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioPmLoanGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200165>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioPmLoanGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Repay futures Negative Balance  Weight(IP): 1500
     * @summary Repay futures Negative Balance (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200169>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioRepayFuturesNegativeBalancePost(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Query Auto-repay-futures Status  Weight(IP): 30
     * @summary Get Auto-repay-futures Status (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioRepayFuturesSwitchGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200170>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioRepayFuturesSwitchGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Change Auto-repay-futures Status  Weight(IP): 1500
     * @summary Change Auto-repay-futures Status (USER_DATA)
     * @param {boolean} autoRepay 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioRepayFuturesSwitchPost(autoRepay: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200169>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioRepayFuturesSwitchPost(autoRepay, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Repay Portfolio Margin Bankruptcy Loan.  Weight(UID): 3000
     * @summary Portfolio Margin Bankruptcy Loan Repay (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [from] 
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof PortfolioMarginApi
     */
    public async sapiV1PortfolioRepayPost(timestamp: number, signature: string, from?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200166>> {
        return PortfolioMarginApiFp(this.configuration).sapiV1PortfolioRepayPost(timestamp, signature, from, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
