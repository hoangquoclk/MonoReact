/* tslint:disable */
/* eslint-disable */
/**
 * Binance Public Spot API
 * OpenAPI Specifications for the Binance Public Spot API  API documents:   - [https://github.com/binance/binance-spot-api-docs](https://github.com/binance/binance-spot-api-docs)   - [https://binance-docs.github.io/apidocs/spot/en](https://binance-docs.github.io/apidocs/spot/en)
 *
 * OpenAPI spec version: 1.0
 * 
 *
 * NOTE: This class is auto generated by the swagger code generator program.
 * https://github.com/swagger-api/swagger-codegen.git
 * Do not edit the class manually.
 */

import globalAxios, { AxiosResponse, AxiosInstance, AxiosRequestConfig } from 'axios';
import { Configuration } from '../configuration';
// Some imports not used depending on template conditions
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from '../base';
import { InlineResponse200136 } from '../models';
import { InlineResponse200256 } from '../models';
import { InlineResponse200257 } from '../models';
import { InlineResponse200258 } from '../models';
import { InlineResponse200259 } from '../models';
import { InlineResponse200260 } from '../models';
import { InlineResponse200261 } from '../models';
import { InlineResponse200262 } from '../models';
import { InlineResponse200263 } from '../models';
import { InlineResponse200264 } from '../models';
import { InlineResponse200265 } from '../models';
import { InlineResponse200266 } from '../models';
import { InlineResponse200267 } from '../models';
import { InlineResponse200268 } from '../models';
import { InlineResponse200269 } from '../models';
import { InlineResponse200270 } from '../models';
import { InlineResponse200271 } from '../models';
import { InlineResponse200272 } from '../models';
import { InlineResponse200273 } from '../models';
import { InlineResponse20054 } from '../models';
/**
 * SimpleEarnApi - axios parameter creator
 * @export
 */
export const SimpleEarnApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 150
         * @summary Simple Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnAccountGet: async (timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnAccountGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnAccountGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/account`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Collateral Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet: async (timestamp: number, signature: string, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/collateralRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Rate History (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleHistoryRateHistoryGet: async (productId: string, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryRateHistoryGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryRateHistoryGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryRateHistoryGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/rateHistory`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Redemption Record (USER_DATA)
         * @param {string} [productId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet: async (productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/redemptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemId !== undefined) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Rewards History (USER_DATA)
         * @param {string} type \&quot;BONUS\&quot;, \&quot;REALTIME\&quot;, \&quot;REWARDS\&quot;
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet: async (type: string, productId?: string, asset?: string, startTime?: number, endTime?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'type' is not null or undefined
            if (type === null || type === undefined) {
                throw new RequiredError('type','Required parameter type was null or undefined when calling sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/rewardsRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (type !== undefined) {
                localVarQueryParameter['type'] = type;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet: async (timestamp: number, signature: string, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/history/subscriptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Get available Simple Earn flexible product list  Weight(IP): 150
         * @summary Get Simple Earn Flexible Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleListGet: async (timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleListGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Personal Left Quota (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet: async (productId: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/personalLeftQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [productId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexiblePositionGet: async (timestamp: number, signature: string, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexiblePositionGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexiblePositionGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [redeemAll] true or false, default to false
         * @param {number} [amount] if redeemAll is false, amount is mandatory
         * @param {string} [destAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleRedeemPost: async (productId: string, timestamp: number, signature: string, redeemAll?: boolean, amount?: number, destAccount?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexibleRedeemPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleRedeemPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleRedeemPost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (redeemAll !== undefined) {
                localVarQueryParameter['redeemAll'] = redeemAll;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (destAccount !== undefined) {
                localVarQueryParameter['destAccount'] = destAccount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Set Flexible Auto Subscribe (USER_DATA)
         * @param {string} productId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleSetAutoSubscribePost: async (productId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexibleSetAutoSubscribePost.');
            }
            // verify required parameter 'autoSubscribe' is not null or undefined
            if (autoSubscribe === null || autoSubscribe === undefined) {
                throw new RequiredError('autoSubscribe','Required parameter autoSubscribe was null or undefined when calling sapiV1SimpleEarnFlexibleSetAutoSubscribePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleSetAutoSubscribePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleSetAutoSubscribePost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/setAutoSubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleSubscribePost: async (productId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexibleSubscribePost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SimpleEarnFlexibleSubscribePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleSubscribePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleSubscribePost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Preview (USER_DATA)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnFlexibleSubscriptionPreviewGet: async (productId: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'productId' is not null or undefined
            if (productId === null || productId === undefined) {
                throw new RequiredError('productId','Required parameter productId was null or undefined when calling sapiV1SimpleEarnFlexibleSubscriptionPreviewGet.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SimpleEarnFlexibleSubscriptionPreviewGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnFlexibleSubscriptionPreviewGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnFlexibleSubscriptionPreviewGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/flexible/subscriptionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (productId !== undefined) {
                localVarQueryParameter['productId'] = productId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedHistoryRedemptionRecordGet: async (timestamp: number, signature: string, positionId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedHistoryRedemptionRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedHistoryRedemptionRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/history/redemptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (redeemId !== undefined) {
                localVarQueryParameter['redeemId'] = redeemId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Rewards History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedHistoryRewardsRecordGet: async (timestamp: number, signature: string, positionId?: string, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedHistoryRewardsRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedHistoryRewardsRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/history/rewardsRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedHistorySubscriptionRecordGet: async (timestamp: number, signature: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedHistorySubscriptionRecordGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedHistorySubscriptionRecordGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/history/subscriptionRecord`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (purchaseId !== undefined) {
                localVarQueryParameter['purchaseId'] = purchaseId;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (startTime !== undefined) {
                localVarQueryParameter['startTime'] = startTime;
            }

            if (endTime !== undefined) {
                localVarQueryParameter['endTime'] = endTime;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Simple Earn Locked Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedListGet: async (timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedListGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedListGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/list`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Personal Left Quota (USER_DATA)
         * @param {string} projectId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedPersonalLeftQuotaGet: async (projectId: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling sapiV1SimpleEarnLockedPersonalLeftQuotaGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedPersonalLeftQuotaGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedPersonalLeftQuotaGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/personalLeftQuota`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [positionId] 
         * @param {string} [projectId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedPositionGet: async (timestamp: number, signature: string, asset?: string, positionId?: string, projectId?: string, current?: number, size?: number, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedPositionGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedPositionGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/position`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (asset !== undefined) {
                localVarQueryParameter['asset'] = asset;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (current !== undefined) {
                localVarQueryParameter['current'] = current;
            }

            if (size !== undefined) {
                localVarQueryParameter['size'] = size;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Locked Product (TRADE)
         * @param {string} positionId 1234
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedRedeemPost: async (positionId: string, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            if (positionId === null || positionId === undefined) {
                throw new RequiredError('positionId','Required parameter positionId was null or undefined when calling sapiV1SimpleEarnLockedRedeemPost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedRedeemPost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedRedeemPost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/redeem`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Set Locked Auto Subscribe (USER_DATA)
         * @param {string} positionId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedSetAutoSubscribePost: async (positionId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'positionId' is not null or undefined
            if (positionId === null || positionId === undefined) {
                throw new RequiredError('positionId','Required parameter positionId was null or undefined when calling sapiV1SimpleEarnLockedSetAutoSubscribePost.');
            }
            // verify required parameter 'autoSubscribe' is not null or undefined
            if (autoSubscribe === null || autoSubscribe === undefined) {
                throw new RequiredError('autoSubscribe','Required parameter autoSubscribe was null or undefined when calling sapiV1SimpleEarnLockedSetAutoSubscribePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedSetAutoSubscribePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedSetAutoSubscribePost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/setAutoSubscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (positionId !== undefined) {
                localVarQueryParameter['positionId'] = positionId;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Locked Product (TRADE)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedSubscribePost: async (projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling sapiV1SimpleEarnLockedSubscribePost.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SimpleEarnLockedSubscribePost.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedSubscribePost.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedSubscribePost.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/subscribe`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (sourceAccount !== undefined) {
                localVarQueryParameter['sourceAccount'] = sourceAccount;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Preview (USER_DATA)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        sapiV1SimpleEarnLockedSubscriptionPreviewGet: async (projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, recvWindow?: number, options: AxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'projectId' is not null or undefined
            if (projectId === null || projectId === undefined) {
                throw new RequiredError('projectId','Required parameter projectId was null or undefined when calling sapiV1SimpleEarnLockedSubscriptionPreviewGet.');
            }
            // verify required parameter 'amount' is not null or undefined
            if (amount === null || amount === undefined) {
                throw new RequiredError('amount','Required parameter amount was null or undefined when calling sapiV1SimpleEarnLockedSubscriptionPreviewGet.');
            }
            // verify required parameter 'timestamp' is not null or undefined
            if (timestamp === null || timestamp === undefined) {
                throw new RequiredError('timestamp','Required parameter timestamp was null or undefined when calling sapiV1SimpleEarnLockedSubscriptionPreviewGet.');
            }
            // verify required parameter 'signature' is not null or undefined
            if (signature === null || signature === undefined) {
                throw new RequiredError('signature','Required parameter signature was null or undefined when calling sapiV1SimpleEarnLockedSubscriptionPreviewGet.');
            }
            const localVarPath = `/sapi/v1/simple-earn/locked/subscriptionPreview`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, 'https://example.com');
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }
            const localVarRequestOptions :AxiosRequestConfig = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication ApiKeyAuth required
            if (configuration && configuration.apiKey) {
                const localVarApiKeyValue = typeof configuration.apiKey === 'function'
                    ? await configuration.apiKey("X-MBX-APIKEY")
                    : await configuration.apiKey;
                localVarHeaderParameter["X-MBX-APIKEY"] = localVarApiKeyValue;
            }

            if (projectId !== undefined) {
                localVarQueryParameter['projectId'] = projectId;
            }

            if (amount !== undefined) {
                localVarQueryParameter['amount'] = amount;
            }

            if (autoSubscribe !== undefined) {
                localVarQueryParameter['autoSubscribe'] = autoSubscribe;
            }

            if (recvWindow !== undefined) {
                localVarQueryParameter['recvWindow'] = recvWindow;
            }

            if (timestamp !== undefined) {
                localVarQueryParameter['timestamp'] = timestamp;
            }

            if (signature !== undefined) {
                localVarQueryParameter['signature'] = signature;
            }

            const query = new URLSearchParams(localVarUrlObj.search);
            for (const key in localVarQueryParameter) {
                query.set(key, localVarQueryParameter[key]);
            }
            for (const key in options.params) {
                query.set(key, options.params[key]);
            }
            localVarUrlObj.search = (new URLSearchParams(query)).toString();
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: localVarUrlObj.pathname + localVarUrlObj.search + localVarUrlObj.hash,
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * SimpleEarnApi - functional programming interface
 * @export
 */
export const SimpleEarnApiFp = function(configuration?: Configuration) {
    return {
        /**
         * Weight(IP): 150
         * @summary Simple Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200263>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnAccountGet(timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Collateral Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp: number, signature: string, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200273>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp, signature, productId, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Rate History (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId: string, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200272>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId, timestamp, signature, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Redemption Record (USER_DATA)
         * @param {string} [productId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200266>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId, redeemId, asset, startTime, endTime, current, size, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Rewards History (USER_DATA)
         * @param {string} type \&quot;BONUS\&quot;, \&quot;REALTIME\&quot;, \&quot;REWARDS\&quot;
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type: string, productId?: string, asset?: string, startTime?: number, endTime?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200268>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type, productId, asset, startTime, endTime, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp: number, signature: string, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200264>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp, signature, productId, purchaseId, asset, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Get available Simple Earn flexible product list  Weight(IP): 150
         * @summary Get Simple Earn Flexible Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200256>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleListGet(timestamp, signature, asset, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Personal Left Quota (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200136>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [productId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexiblePositionGet(timestamp: number, signature: string, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200261>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexiblePositionGet(timestamp, signature, asset, productId, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [redeemAll] true or false, default to false
         * @param {number} [amount] if redeemAll is false, amount is mandatory
         * @param {string} [destAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleRedeemPost(productId: string, timestamp: number, signature: string, redeemAll?: boolean, amount?: number, destAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200260>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleRedeemPost(productId, timestamp, signature, redeemAll, amount, destAccount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Set Flexible Auto Subscribe (USER_DATA)
         * @param {string} productId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20054>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId, autoSubscribe, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSubscribePost(productId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200258>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleSubscribePost(productId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Preview (USER_DATA)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200270>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId, amount, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp: number, signature: string, positionId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200267>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp, signature, positionId, redeemId, asset, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Rewards History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp: number, signature: string, positionId?: string, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200269>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp, signature, positionId, asset, startTime, endTime, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp: number, signature: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200265>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp, signature, purchaseId, asset, startTime, endTime, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Simple Earn Locked Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200257>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedListGet(timestamp, signature, asset, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Personal Left Quota (USER_DATA)
         * @param {string} projectId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200136>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [positionId] 
         * @param {string} [projectId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedPositionGet(timestamp: number, signature: string, asset?: string, positionId?: string, projectId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200262>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedPositionGet(timestamp, signature, asset, positionId, projectId, current, size, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Locked Product (TRADE)
         * @param {string} positionId 1234
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedRedeemPost(positionId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200260>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedRedeemPost(positionId, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Set Locked Auto Subscribe (USER_DATA)
         * @param {string} positionId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse20054>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId, autoSubscribe, timestamp, signature, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Locked Product (TRADE)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSubscribePost(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<InlineResponse200259>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedSubscribePost(projectId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Preview (USER_DATA)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => Promise<AxiosResponse<Array<InlineResponse200271>>>> {
            const localVarAxiosArgs = await SimpleEarnApiAxiosParamCreator(configuration).sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId, amount, timestamp, signature, autoSubscribe, recvWindow, options);
            return (axios: AxiosInstance = globalAxios, basePath: string = BASE_PATH) => {
                const axiosRequestArgs :AxiosRequestConfig = {...localVarAxiosArgs.options, url: basePath + localVarAxiosArgs.url};
                return axios.request(axiosRequestArgs);
            };
        },
    }
};

/**
 * SimpleEarnApi - factory interface
 * @export
 */
export const SimpleEarnApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    return {
        /**
         * Weight(IP): 150
         * @summary Simple Account (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200263>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnAccountGet(timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Collateral Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp: number, signature: string, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200273>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp, signature, productId, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Rate History (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId: string, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200272>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId, timestamp, signature, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Redemption Record (USER_DATA)
         * @param {string} [productId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200266>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId, redeemId, asset, startTime, endTime, current, size, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Rewards History (USER_DATA)
         * @param {string} type \&quot;BONUS\&quot;, \&quot;REALTIME\&quot;, \&quot;REWARDS\&quot;
         * @param {string} [productId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type: string, productId?: string, asset?: string, startTime?: number, endTime?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200268>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type, productId, asset, startTime, endTime, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [productId] 
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp: number, signature: string, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200264>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp, signature, productId, purchaseId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Get available Simple Earn flexible product list  Weight(IP): 150
         * @summary Get Simple Earn Flexible Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200256>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleListGet(timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Personal Left Quota (USER_DATA)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200136>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [productId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexiblePositionGet(timestamp: number, signature: string, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200261>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexiblePositionGet(timestamp, signature, asset, productId, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [redeemAll] true or false, default to false
         * @param {number} [amount] if redeemAll is false, amount is mandatory
         * @param {string} [destAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleRedeemPost(productId: string, timestamp: number, signature: string, redeemAll?: boolean, amount?: number, destAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200260>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleRedeemPost(productId, timestamp, signature, redeemAll, amount, destAccount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Set Flexible Auto Subscribe (USER_DATA)
         * @param {string} productId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20054>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId, autoSubscribe, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Flexible Product (TRADE)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSubscribePost(productId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200258>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleSubscribePost(productId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Flexible Subscription Preview (USER_DATA)
         * @param {string} productId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200270>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId, amount, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Redemption Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [redeemId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp: number, signature: string, positionId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200267>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp, signature, positionId, redeemId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Rewards History (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [positionId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp: number, signature: string, positionId?: string, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200269>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp, signature, positionId, asset, startTime, endTime, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Record (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [purchaseId] 
         * @param {string} [asset] 
         * @param {number} [startTime] UTC timestamp in ms
         * @param {number} [endTime] UTC timestamp in ms
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp: number, signature: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200265>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp, signature, purchaseId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Simple Earn Locked Product List (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200257>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedListGet(timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Personal Left Quota (USER_DATA)
         * @param {string} projectId 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200136>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Product Position (USER_DATA)
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {string} [asset] 
         * @param {string} [positionId] 
         * @param {string} [projectId] 
         * @param {number} [current] Current querying page. Start from 1. Default:1
         * @param {number} [size] Default:10 Max:100
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedPositionGet(timestamp: number, signature: string, asset?: string, positionId?: string, projectId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200262>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedPositionGet(timestamp, signature, asset, positionId, projectId, current, size, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Redeem Locked Product (TRADE)
         * @param {string} positionId 1234
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedRedeemPost(positionId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200260>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedRedeemPost(positionId, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Set Locked Auto Subscribe (USER_DATA)
         * @param {string} positionId 
         * @param {boolean} autoSubscribe true or false
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse20054>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId, autoSubscribe, timestamp, signature, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 1  Rate Limit: 1/3s per account
         * @summary Subscribe Locked Product (TRADE)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSubscribePost(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<InlineResponse200259>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedSubscribePost(projectId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options).then((request) => request(axios, basePath));
        },
        /**
         * Weight(IP): 150
         * @summary Get Locked Subscription Preview (USER_DATA)
         * @param {string} projectId 
         * @param {number} amount 
         * @param {number} timestamp UTC timestamp in ms
         * @param {string} signature Signature
         * @param {boolean} [autoSubscribe] true or false, default true.
         * @param {number} [recvWindow] The value cannot be greater than 60000
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, recvWindow?: number, options?: AxiosRequestConfig): Promise<AxiosResponse<Array<InlineResponse200271>>> {
            return SimpleEarnApiFp(configuration).sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId, amount, timestamp, signature, autoSubscribe, recvWindow, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * SimpleEarnApi - object-oriented interface
 * @export
 * @class SimpleEarnApi
 * @extends {BaseAPI}
 */
export class SimpleEarnApi extends BaseAPI {
    /**
     * Weight(IP): 150
     * @summary Simple Account (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnAccountGet(timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200263>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnAccountGet(timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Collateral Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [productId] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp: number, signature: string, productId?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200273>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleHistoryCollateralRecordGet(timestamp, signature, productId, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Rate History (USER_DATA)
     * @param {string} productId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId: string, timestamp: number, signature: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200272>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleHistoryRateHistoryGet(productId, timestamp, signature, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Redemption Record (USER_DATA)
     * @param {string} [productId] 
     * @param {string} [redeemId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200266>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleHistoryRedemptionRecordGet(productId, redeemId, asset, startTime, endTime, current, size, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Rewards History (USER_DATA)
     * @param {string} type \&quot;BONUS\&quot;, \&quot;REALTIME\&quot;, \&quot;REWARDS\&quot;
     * @param {string} [productId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type: string, productId?: string, asset?: string, startTime?: number, endTime?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200268>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleHistoryRewardsRecordGet(type, productId, asset, startTime, endTime, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Subscription Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [productId] 
     * @param {string} [purchaseId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp: number, signature: string, productId?: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200264>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleHistorySubscriptionRecordGet(timestamp, signature, productId, purchaseId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Get available Simple Earn flexible product list  Weight(IP): 150
     * @summary Get Simple Earn Flexible Product List (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200256>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleListGet(timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Personal Left Quota (USER_DATA)
     * @param {string} productId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200136>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexiblePersonalLeftQuotaGet(productId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Product Position (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {string} [productId] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexiblePositionGet(timestamp: number, signature: string, asset?: string, productId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200261>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexiblePositionGet(timestamp, signature, asset, productId, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1  Rate Limit: 1/3s per account
     * @summary Redeem Flexible Product (TRADE)
     * @param {string} productId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {boolean} [redeemAll] true or false, default to false
     * @param {number} [amount] if redeemAll is false, amount is mandatory
     * @param {string} [destAccount] SPOT,FUND,ALL, default SPOT
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleRedeemPost(productId: string, timestamp: number, signature: string, redeemAll?: boolean, amount?: number, destAccount?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200260>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleRedeemPost(productId, timestamp, signature, redeemAll, amount, destAccount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Set Flexible Auto Subscribe (USER_DATA)
     * @param {string} productId 
     * @param {boolean} autoSubscribe true or false
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20054>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleSetAutoSubscribePost(productId, autoSubscribe, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1  Rate Limit: 1/3s per account
     * @summary Subscribe Flexible Product (TRADE)
     * @param {string} productId 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {boolean} [autoSubscribe] true or false, default true.
     * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleSubscribePost(productId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200258>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleSubscribePost(productId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Flexible Subscription Preview (USER_DATA)
     * @param {string} productId 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId: string, amount: number, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200270>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnFlexibleSubscriptionPreviewGet(productId, amount, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Redemption Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionId] 
     * @param {string} [redeemId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp: number, signature: string, positionId?: string, redeemId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200267>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedHistoryRedemptionRecordGet(timestamp, signature, positionId, redeemId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Rewards History (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [positionId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp: number, signature: string, positionId?: string, asset?: string, startTime?: number, endTime?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200269>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedHistoryRewardsRecordGet(timestamp, signature, positionId, asset, startTime, endTime, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Subscription Record (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [purchaseId] 
     * @param {string} [asset] 
     * @param {number} [startTime] UTC timestamp in ms
     * @param {number} [endTime] UTC timestamp in ms
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp: number, signature: string, purchaseId?: string, asset?: string, startTime?: number, endTime?: number, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200265>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedHistorySubscriptionRecordGet(timestamp, signature, purchaseId, asset, startTime, endTime, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Simple Earn Locked Product List (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedListGet(timestamp: number, signature: string, asset?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200257>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedListGet(timestamp, signature, asset, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Personal Left Quota (USER_DATA)
     * @param {string} projectId 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200136>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedPersonalLeftQuotaGet(projectId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Product Position (USER_DATA)
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {string} [asset] 
     * @param {string} [positionId] 
     * @param {string} [projectId] 
     * @param {number} [current] Current querying page. Start from 1. Default:1
     * @param {number} [size] Default:10 Max:100
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedPositionGet(timestamp: number, signature: string, asset?: string, positionId?: string, projectId?: string, current?: number, size?: number, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200262>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedPositionGet(timestamp, signature, asset, positionId, projectId, current, size, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1  Rate Limit: 1/3s per account
     * @summary Redeem Locked Product (TRADE)
     * @param {string} positionId 1234
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedRedeemPost(positionId: string, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200260>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedRedeemPost(positionId, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Set Locked Auto Subscribe (USER_DATA)
     * @param {string} positionId 
     * @param {boolean} autoSubscribe true or false
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId: string, autoSubscribe: boolean, timestamp: number, signature: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse20054>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedSetAutoSubscribePost(positionId, autoSubscribe, timestamp, signature, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 1  Rate Limit: 1/3s per account
     * @summary Subscribe Locked Product (TRADE)
     * @param {string} projectId 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {boolean} [autoSubscribe] true or false, default true.
     * @param {string} [sourceAccount] SPOT,FUND,ALL, default SPOT
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedSubscribePost(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, sourceAccount?: string, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<InlineResponse200259>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedSubscribePost(projectId, amount, timestamp, signature, autoSubscribe, sourceAccount, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
    /**
     * Weight(IP): 150
     * @summary Get Locked Subscription Preview (USER_DATA)
     * @param {string} projectId 
     * @param {number} amount 
     * @param {number} timestamp UTC timestamp in ms
     * @param {string} signature Signature
     * @param {boolean} [autoSubscribe] true or false, default true.
     * @param {number} [recvWindow] The value cannot be greater than 60000
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof SimpleEarnApi
     */
    public async sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId: string, amount: number, timestamp: number, signature: string, autoSubscribe?: boolean, recvWindow?: number, options?: AxiosRequestConfig) : Promise<AxiosResponse<Array<InlineResponse200271>>> {
        return SimpleEarnApiFp(this.configuration).sapiV1SimpleEarnLockedSubscriptionPreviewGet(projectId, amount, timestamp, signature, autoSubscribe, recvWindow, options).then((request) => request(this.axios, this.basePath));
    }
}
